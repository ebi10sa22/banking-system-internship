{"version":3,"sources":["Components/Table/HistoryTable.js","Context/StateProvider.js","Components/Table/TransferTable.js","Components/Logos/Logo.js","Components/Input/InputSwitch.js","Components/Navbar/Navbar.js","Pages/Landing/Landing.js","Pages/Create/Create.js","App.js","reportWebVitals.js","Context/reducer.js","serviceWorker.js","index.js"],"names":["useRowStyles","makeStyles","root","width","borderBottom","table","minWidth","marginTop","overflowX","paper","baackgroundColor","container","maxHeight","div","display","justifyContent","Row","props","console","log","process","row","React","useState","open","setOpen","classes","useStateValue","state","Fragment","className","aria-label","size","onClick","style","color","theme","align","sno","sender_name","reciver_name","date","paddingBottom","paddingTop","colSpan","in","timeout","unmountOnExit","margin","variant","gutterBottom","component","map","s","i","sender_account","amt_sent","sender_balance","r","reciver_account","amt_recived","reciver_balance","CollapsibleTable","rows","setRows","nodeRef","useRef","useEffect","type","window","location","pathname","axios","get","toString","then","res","data","catch","err","fetchData","table_config","length","ref","stickyHeader","zIndex","backgroundColor","h","background","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useContext","useStyles","backdrop","drawer","formControl","spacing","selectEmpty","button","backdrop2","Tables","back","setBack","name","id","email","balance","sender","setSender","reciver","setReciver","transfer_money","setTransfer","success","setSuccess","nextBtn","showButton","Paper","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","_id","mobile","Button","Backdrop","FormControl","disabled","NativeSelect","FormHelperText","onChange","e","target","defaultValue","TextField","error","label","InputLabelProps","shrink","show","post","recived","parseInt","animationData","SendingLottie","speed","height","play","loop","onComplete","padding","Moon","xmlns","viewBox","d","Sun","InputSwitch","setShow","dispatch","border","marginLeft","Navbar","showOptions","setOption","setSize","useLayoutEffect","updateSize","innerWidth","addEventListener","removeEventListener","prevScrollPos","pageYOffset","handleScroll","scrollY","currentScrollPos","visible","navbar","items","opacity","transform","borderRadius","isOpen","menuClicked","strokeWidth","screen","option","item","toLowerCase","to","btn","marginRight","fontWeight","Landing","backbutton","btn2","Create","nameInput","setName","emailInput","setEmail","mobileInput","setMobile","dateInput","setDate","balanceInput","setBalance","checkInput","setCheck","setError","flexDirection","alignItems","CreateLottie","alert","onSubmit","preventDefault","date_of_birth","code","status","submit","required","placeholder","fontSize","maxLength","max","min","App","exact","path","HistoryTable","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","undefined","action","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b5b6f79.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Table.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport axios from \"axios\";\nimport { useStateValue } from \"../../Context/StateProvider\";\n\nconst useRowStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    \"& > *\": {\n      borderBottom: \"unset\",\n    },\n  },\n  table: {\n    minWidth: 650,\n    marginTop: 5,\n    overflowX: \"scroll\",\n  },\n  paper: {\n    width: \"90%\",\n    marginTop: \"20px\",\n    baackgroundColor: \"transparant\",\n  },\n  container: {\n    maxHeight: 500,\n  },\n  div: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n});\n\nfunction Row(props) {\n  console.log(process);\n  const { row } = props;\n  const [open, setOpen] = React.useState(false);\n  const classes = useRowStyles();\n  const [state] = useStateValue();\n  const sender = [\n    \"Account Number\",\n    \"Name\",\n    \"Amount Sent\",\n    \"Balance Amount (in Rs)\",\n  ];\n  const reciver = [\n    \"Account Number\",\n    \"Name\",\n    \"Amount Recived\",\n    \"Total Amount (in Rs)\",\n  ];\n  return (\n    <React.Fragment>\n      <TableRow className={classes.root}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell\n          style={{\n            color: state.theme ? \"white\" : \"#171c28\",\n          }}\n          align=\"center\"\n        >\n          {props?.sno + 1}\n        </TableCell>\n        <TableCell\n          style={{\n            color: state.theme ? \"white\" : \"#171c28\",\n          }}\n          align=\"center\"\n        >\n          {row?.sender_name}\n        </TableCell>\n        <TableCell\n          style={{\n            color: state.theme ? \"white\" : \"#171c28\",\n          }}\n          align=\"center\"\n        >\n          {row?.reciver_name}\n        </TableCell>\n        <TableCell\n          style={{\n            color: state.theme ? \"white\" : \"#171c28\",\n          }}\n          align=\"center\"\n        >\n          {row?.date}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography\n                style={{\n                  color: state.theme ? \"#eee8aa\" : \"#171c28\",\n                }}\n                variant=\"h6\"\n                gutterBottom\n                component=\"div\"\n              >\n                Sender History\n              </Typography>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell />\n                    {sender.map((s, i) => (\n                      <TableCell\n                        style={{\n                          color: state.theme ? \"cornsilk\" : \"#171c28\",\n                        }}\n                        key={i}\n                        align=\"center\"\n                      >\n                        {s}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell />\n                    <TableCell\n                      style={{\n                        color: state.theme ? \"white\" : \"#171c28\",\n                      }}\n                      align=\"center\"\n                    >\n                      {row?.sender_account}\n                    </TableCell>\n                    <TableCell\n                      style={{\n                        color: state.theme ? \"white\" : \"#171c28\",\n                      }}\n                      align=\"center\"\n                    >\n                      {row?.sender_name}\n                    </TableCell>\n                    <TableCell\n                      style={{\n                        color: state.theme ? \"white\" : \"#171c28\",\n                      }}\n                      align=\"center\"\n                    >\n                      {row?.amt_sent}\n                    </TableCell>\n                    <TableCell\n                      style={{\n                        color: state.theme ? \"white\" : \"#171c28\",\n                      }}\n                      align=\"center\"\n                    >\n                      {row?.sender_balance}\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </Box>\n            <Typography\n              style={{\n                color: state.theme ? \"#eee8aa\" : \"#171c28\",\n              }}\n              variant=\"h6\"\n              gutterBottom\n              component=\"div\"\n            >\n              Reciver History\n            </Typography>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell />\n                  {reciver.map((r, i) => (\n                    <TableCell\n                      style={{\n                        color: state.theme ? \"cornsilk\" : \"lightgray\",\n                      }}\n                      key={i}\n                      align=\"center\"\n                    >\n                      {r}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow>\n                  <TableCell />\n                  <TableCell\n                    style={{\n                      color: state.theme ? \"white\" : \"#171c28\",\n                    }}\n                    align=\"center\"\n                  >\n                    {row?.reciver_account}\n                  </TableCell>\n                  <TableCell\n                    style={{\n                      color: state.theme ? \"white\" : \"#171c28\",\n                    }}\n                    align=\"center\"\n                  >\n                    {row?.reciver_name}\n                  </TableCell>\n                  <TableCell\n                    style={{\n                      color: state.theme ? \"white\" : \"#171c28\",\n                    }}\n                    align=\"center\"\n                  >\n                    {row?.amt_recived}\n                  </TableCell>\n                  <TableCell\n                    style={{\n                      color: state.theme ? \"white\" : \"#171c28\",\n                    }}\n                    align=\"center\"\n                  >\n                    {row?.reciver_balance}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nexport default function CollapsibleTable() {\n  const [rows, setRows] = React.useState([]);\n  const nodeRef = React.useRef(1);\n  const [state] = useStateValue();\n\n  React.useEffect(() => {\n    function fetchData() {\n      let type = window.location.pathname === \"/history\" && \"/show_history\";\n      axios\n        .get(\"/users\" + type.toString())\n        .then((res) => {\n          setRows(res.data.data);\n        })\n        .catch((err) => console.log(err));\n    }\n    fetchData();\n    return () => {};\n  }, [state.table_config]);\n\n  const classes = useRowStyles();\n  const head = [\"Serial no\", \"Sender Name\", \"Reciver Name\", \"Transcation time\"];\n  return (\n    <div className={classes.div}>\n      {\" \"}\n      <Paper className={classes.paper}>\n        {rows.length > 0 ? (\n          <TableContainer className={classes.container} ref={nodeRef}>\n            <Table aria-label=\"collapsible table\" className={classes.table}>\n              <TableHead\n                stickyHeader\n                style={{\n                  zIndex: 1000,\n                  backgroundColor: !state.theme ? \"lightcoral\" : \"#171c28\",\n                }}\n              >\n                <TableRow>\n                  <TableCell />\n                  {head.map((h, i) => (\n                    <TableCell\n                      style={{\n                        color: state.theme ? \"white\" : \"#171c28\",\n                      }}\n                      key={i}\n                      align=\"center\"\n                    >\n                      {h}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody\n                style={{\n                  background: !state.theme ? \"white\" : \"gray\",\n                  color: state.theme ? \"white\" : \"#171c28\",\n                }}\n              >\n                {rows.length > 0 &&\n                  rows.map((row, i) => <Row key={i} row={row} sno={i} />)}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        ) : (\n          <div className=\"history\">\n            <h1>History Not found !</h1>\n          </div>\n        )}\n      </Paper>\n    </div>\n  );\n}\n","import React, { createContext, useContext, useReducer } from \"react\";\n\n// Prepares the dataLayer\nexport const StateContext = createContext();\n\n// Wrap our app and provide the Data layer\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\n// Pull information from the data layer\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Backdrop, Button, TextField } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useStateValue } from \"../../Context/StateProvider\";\nimport \"./Table.css\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport Lottie from \"react-lottie-player\";\nimport SendingLottie from \"../../assests/lottie/sending.json\";\n\nconst useStyles = makeStyles((theme) => ({\n  div: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    marginTop: \"20px\",\n    width: \"80%\",\n    backgroundColor: \"transparent\",\n  },\n  container: {\n    maxHeight: 500,\n  },\n  table: {\n    minWidth: 650,\n    overflowX: \"scroll\",\n  },\n  backdrop: { zIndex: theme.zIndex.drawer + 1, backgroundColor: \"#464646e7\" },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  button: {\n    marginTop: theme.spacing(4),\n  },\n  backdrop2: {\n    backgroundColor: \"aqua\",\n  },\n}));\nexport default function Tables() {\n  const classes = useStyles();\n  const nodeRef = React.useRef(1);\n\n  const [state] = useStateValue();\n  const [rows, setRows] = useState([]);\n  const [back, setBack] = useState(false);\n  const [sender, setSender] = useState({\n    name: \"\",\n    id: \"\",\n    email: \"\",\n    balance: 0,\n  });\n  const [reciver, setReciver] = useState(\"\");\n  const [transfer_money, setTransfer] = useState();\n  const [success, setSuccess] = useState(false);\n  const [nextBtn, showButton] = useState(false);\n\n  let head = [\n    \"S.No\",\n    \"Account Number\",\n    \"Name\",\n    \"Mobile Number\",\n    \" E-mail\",\n    \"Balance\",\n    \" Transfer Money\",\n  ];\n\n  React.useEffect(() => {\n    function fetchData() {\n      let type = window.location.pathname;\n      axios\n        .get(\"/users\" + type.toString())\n        .then((res) => setRows(res.data.data))\n        .catch((err) => console.log(err));\n    }\n    fetchData();\n    return () => {};\n  }, [state.table_config]);\n\n  const postDetails = () => {\n    setSuccess({ ...success, show: true });\n    axios\n      .post(\"/users/transfer_money\", {\n        sender: {\n          name: sender.name,\n          email: sender.email,\n          id: sender.id.toString(),\n          balance: sender.balance - transfer_money,\n        },\n        reciver: {\n          id: reciver,\n          recived: parseInt(transfer_money),\n        },\n      })\n      .then((res) => setSuccess(true))\n      .catch((err) => console.log(err));\n  };\n  return (\n    <div className={classes.div}>\n      <Paper className={classes.paper}>\n        {rows.length > 0 ? (\n          <TableContainer className={classes.container}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead\n                stickyHeader\n                style={{\n                  zIndex: 1000,\n                  backgroundColor: !state.theme ? \"lightcoral\" : \"#171c28\",\n                }}\n              >\n                <TableRow>\n                  {head.map((h, i) => (\n                    <TableCell\n                      style={{\n                        color: state.theme ? \"white\" : \"#171c28\",\n                      }}\n                      key={i}\n                      align=\"center\"\n                    >\n                      {h}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {rows.length > -1 &&\n                  rows.map((row, i) => (\n                    <TableRow\n                      key={i}\n                      style={{\n                        background: !state.theme ? \"white\" : \"gray\",\n                      }}\n                    >\n                      <TableCell\n                        style={{\n                          color: state.theme ? \"white\" : \"#171c28\",\n                        }}\n                        align=\"center\"\n                      >\n                        {i + 1}\n                      </TableCell>\n                      <TableCell\n                        style={{\n                          color: state.theme ? \"white\" : \"#171c28\",\n                        }}\n                        align=\"center\"\n                      >\n                        {row._id}\n                      </TableCell>\n                      <TableCell\n                        style={{\n                          color: state.theme ? \"white\" : \"#171c28\",\n                        }}\n                        align=\"center\"\n                      >\n                        {row.name}\n                      </TableCell>\n                      <TableCell\n                        style={{\n                          color: state.theme ? \"white\" : \"#171c28\",\n                        }}\n                        align=\"center\"\n                      >\n                        {row.mobile}\n                      </TableCell>\n                      <TableCell\n                        style={{\n                          color: state.theme ? \"white\" : \"#171c28\",\n                        }}\n                        align=\"center\"\n                      >\n                        {row.email}\n                      </TableCell>\n                      <TableCell\n                        style={{\n                          color: state.theme ? \"white\" : \"#171c28\",\n                        }}\n                        align=\"center\"\n                      >\n                        {row.balance}\n                      </TableCell>\n                      <TableCell\n                        style={{\n                          color: state.theme ? \"white\" : \"#171c28\",\n                        }}\n                        align=\"center\"\n                      >\n                        <Button\n                          onClick={() => {\n                            setBack(!back);\n                            setSender({\n                              name: row.name,\n                              id: row._id,\n                              balance: row.balance,\n                              email: row.email,\n                            });\n                          }}\n                          variant={state.theme ? \"contained\" : \"outlined\"}\n                          color={state.theme ? \"primary\" : \"secondary\"}\n                        >\n                          Transfer\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n\n            {/* Trnasfer Money Backdrop */}\n            <Backdrop ref={nodeRef} open={back} className={classes.backdrop}>\n              <div className=\"transfer__box\">\n                <FormControl className={classes.formControl} disabled>\n                  <NativeSelect value={sender.name}>\n                    <option value={sender.name}>{sender.name}</option>\n                  </NativeSelect>\n                  <FormHelperText>Sender</FormHelperText>\n                </FormControl>\n                <FormControl className={classes.selectEmpty}>\n                  <NativeSelect\n                    value={reciver}\n                    onChange={(e) => setReciver(e.target.value)}\n                  >\n                    <option value={\"\"} defaultValue />\n                    {rows.map((row) => {\n                      return (\n                        row._id !== sender.id && (\n                          <option value={row._id} key={row._id}>\n                            Name : {row.name} , E-mail : {row.email}\n                          </option>\n                        )\n                      );\n                    })}\n                  </NativeSelect>\n                  <FormHelperText>Reciver</FormHelperText>\n                </FormControl>\n                <FormControl className={classes.selectEmpty}>\n                  <TextField\n                    error={transfer_money > sender.balance}\n                    id=\"standard-number\"\n                    label=\"Number\"\n                    type=\"number\"\n                    value={transfer_money}\n                    onChange={(e) => setTransfer(e.target.value)}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                  <FormHelperText>\n                    {sender.balance === 0\n                      ? \"You cannot send Money.\"\n                      : `Enter less than ${sender.balance}`}\n                  </FormHelperText>\n                </FormControl>\n                <Button\n                  className={classes.button}\n                  disabled={\n                    sender.balance === 0 ||\n                    transfer_money > sender.balance ||\n                    reciver.length === 0\n                  }\n                  variant={state.theme ? \"contained\" : \"outlined\"}\n                  color={state.theme ? \"primary\" : \"secondary\"}\n                  onClick={() => postDetails()}\n                >\n                  Transfer\n                </Button>\n                <Button\n                  className={classes.selectEmpty}\n                  onClick={() => {\n                    setBack(false);\n                    setReciver(\"\");\n                    setSender({ name: \"\", id: \"\", balance: 0, email: \"\" });\n                    setTransfer(0);\n                  }}\n                  variant=\"text\"\n                >\n                  Go Back\n                </Button>\n              </div>\n            </Backdrop>\n\n            {/* Success Transfer Backdrop */}\n            <Backdrop\n              open={success}\n              className={[classes.backdrop, classes.backdrop2]}\n            >\n              <div className=\"sending__money\">\n                <Lottie\n                  animationData={SendingLottie}\n                  background=\"transparent\"\n                  speed=\"1\"\n                  style={{ width: \"300px\", height: \"300px\" }}\n                  play={success}\n                  loop={false}\n                  onComplete={() => {\n                    showButton(!nextBtn);\n                  }}\n                />\n                {nextBtn && (\n                  <Button\n                    className={classes.selectEmpty}\n                    style={{\n                      background: !state.theme ? \"white\" : \"#171c28\",\n                      color: state.theme ? \"white\" : \"#171c28\",\n                      padding: \"10px  20px\",\n                    }}\n                    onClick={() => {\n                      setBack(false);\n                      setReciver(\"\");\n                      setSender({ name: \"\", id: \"\", balance: 0, email: \"\" });\n                      setTransfer(0);\n                      setSuccess(false);\n                    }}\n                    variant=\"contained\"\n                  >\n                    Go Back\n                  </Button>\n                )}\n              </div>\n            </Backdrop>\n          </TableContainer>\n        ) : (\n          <div className=\"history\">\n            <h1>Users Not found !</h1>\n          </div>\n        )}\n      </Paper>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport const Light = () => {\n  return (\n    <svg\n      width=\"148\"\n      height=\"29\"\n      viewBox=\"0 0 148 29\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M14.3878 21.32C14.1318 21.32 13.7398 21.224 13.2118 21.032C13.1158 21 13.0038 20.968 12.8758 20.936C12.7638 20.888 12.6198 20.84 12.4438 20.792C11.1318 20.408 9.69984 19.896 8.14784 19.256C6.59584 18.616 5.81984 18.008 5.81984 17.432C5.81984 17.064 5.93184 16.752 6.15584 16.496C7.57984 15.2 8.90784 14.216 10.1398 13.544C11.3718 12.856 12.8118 12.208 14.4598 11.6C14.6998 11.52 14.8998 11.592 15.0598 11.816C15.2198 12.04 15.3078 12.248 15.3238 12.44C14.9078 12.728 14.1078 13.168 12.9238 13.76C11.7238 14.336 10.6998 14.888 9.85184 15.416C9.01984 15.928 8.29184 16.528 7.66784 17.216C8.91584 17.856 10.1078 18.392 11.2438 18.824C12.3798 19.256 13.2118 19.496 13.7398 19.544C14.1238 19.576 14.4278 19.688 14.6518 19.88C14.8918 20.056 15.0118 20.296 15.0118 20.6C15.0118 20.84 14.9638 21.024 14.8678 21.152C14.7718 21.264 14.6118 21.32 14.3878 21.32ZM124.063 23C123.871 23 123.711 22.92 123.583 22.76C123.455 22.584 123.391 22.4 123.391 22.208C123.391 21.856 123.535 21.328 123.823 20.624C124.127 19.904 124.423 19.264 124.711 18.704L128.575 8.144C128.607 7.888 128.639 7.704 128.671 7.592C128.783 6.872 128.903 6.288 129.031 5.84C129.175 5.392 129.391 5.112 129.679 5C129.903 5.048 130.039 5.152 130.087 5.312C130.135 5.456 130.151 5.608 130.135 5.768C130.135 5.912 130.135 6.016 130.135 6.08C130.135 6.704 129.687 8.44 128.791 11.288C127.911 14.136 126.983 16.8 126.007 19.28C125.031 21.76 124.383 23 124.063 23ZM133.964 21.584C133.724 21.584 133.564 21.512 133.484 21.368C133.42 21.224 133.388 21.024 133.388 20.768C133.452 20.576 133.692 20.352 134.108 20.096C134.524 19.84 135.156 19.504 136.004 19.088C137.188 18.512 138.18 17.976 138.98 17.48C139.796 16.984 140.388 16.464 140.756 15.92C138.964 15.312 137.404 14.672 136.076 14C134.764 13.328 134.036 12.68 133.892 12.056C133.876 12.008 133.868 11.936 133.868 11.84C133.868 11.68 133.908 11.552 133.988 11.456C134.068 11.36 134.188 11.312 134.348 11.312C134.62 11.312 134.844 11.368 135.02 11.48C135.212 11.592 135.42 11.76 135.644 11.984C136.012 12.32 136.324 12.544 136.58 12.656C136.884 12.784 137.34 13.008 137.948 13.328C138.812 13.776 139.556 14.128 140.18 14.384C140.804 14.64 141.412 14.808 142.004 14.888C142.228 14.968 142.364 15.08 142.412 15.224C142.476 15.352 142.5 15.52 142.484 15.728C142.452 16.336 141.86 17.104 140.708 18.032C139.572 18.944 138.3 19.768 136.892 20.504C135.5 21.224 134.524 21.584 133.964 21.584Z\"\n        fill=\"#D1D1D1\"\n      />\n      <path\n        d=\"M25.5435 23C24.5195 23 23.5755 22.8 22.7115 22.4C21.8475 22 21.1595 21.432 20.6475 20.696C20.1355 19.96 19.8795 19.112 19.8795 18.152C19.8795 17.08 20.0795 16.08 20.4795 15.152C20.8795 14.208 21.4635 13.456 22.2315 12.896C23.0155 12.32 23.9275 12.032 24.9675 12.032C26.0555 12.032 26.8795 12.384 27.4395 13.088C27.9995 13.776 28.2635 14.648 28.2315 15.704C28.2315 16.648 27.8555 17.368 27.1035 17.864C26.3675 18.36 25.4235 18.608 24.2715 18.608C24.0955 18.608 23.8315 18.592 23.4795 18.56C22.9035 18.496 22.4955 18.408 22.2555 18.296C22.0155 18.184 21.8955 17.96 21.8955 17.624C21.8955 17.512 21.9275 17.432 21.9915 17.384C22.0555 17.32 22.1835 17.288 22.3755 17.288C22.5835 17.288 22.9515 17.336 23.4795 17.432C23.9915 17.528 24.4475 17.576 24.8475 17.576C26.3195 17.576 27.0555 16.936 27.0555 15.656C27.0555 14.888 26.9115 14.28 26.6235 13.832C26.3515 13.384 25.8635 13.16 25.1595 13.16C24.3915 13.16 23.7035 13.368 23.0955 13.784C22.4875 14.184 22.0155 14.712 21.6795 15.368C21.3595 16.024 21.1995 16.72 21.1995 17.456C21.1995 18.72 21.5515 19.76 22.2555 20.576C22.9595 21.376 24.0475 21.776 25.5195 21.776C25.6955 21.776 25.9915 21.76 26.4075 21.728C26.5835 21.712 26.7995 21.664 27.0555 21.584C27.3115 21.504 27.4955 21.448 27.6075 21.416C28.2955 21.176 28.7995 21.056 29.1195 21.056C29.3595 21.056 29.5435 21.12 29.6715 21.248C29.2715 21.856 28.6715 22.304 27.8715 22.592C27.0875 22.864 26.3115 23 25.5435 23ZM39.4933 23.024C38.2133 23.024 37.2053 22.776 36.4693 22.28C35.7333 21.768 35.1893 21 34.8373 19.976C34.4853 18.936 34.2533 17.544 34.1413 15.8L33.4453 11.744C33.3813 11.152 33.2933 10.576 33.1813 10.016C33.0693 9.456 33.0133 9.056 33.0133 8.816C33.0133 8.48 33.1093 8.232 33.3013 8.072C33.4933 7.896 33.8373 7.776 34.3333 7.712C34.4293 8.512 34.4933 9.112 34.5253 9.512C34.7013 11.064 34.8453 12.256 34.9573 13.088C35.0853 13.904 35.2453 14.76 35.4373 15.656C36.6693 15.112 37.8533 14.84 38.9893 14.84C40.0133 14.84 40.9253 15.056 41.7253 15.488C42.5253 15.904 43.1493 16.496 43.5973 17.264C44.0453 18.016 44.2693 18.864 44.2693 19.808C44.2693 20.912 43.7813 21.728 42.8053 22.256C41.8453 22.768 40.7413 23.024 39.4933 23.024ZM42.9253 19.856C42.9413 19.744 42.9493 19.584 42.9493 19.376C42.9493 18.24 42.5573 17.392 41.7733 16.832C41.0053 16.272 39.9093 15.992 38.4853 15.992C37.6053 15.992 36.9173 16.168 36.4213 16.52C35.9413 16.856 35.7013 17.32 35.7013 17.912C35.7013 19.272 36.0693 20.264 36.8053 20.888C37.5573 21.512 38.7013 21.824 40.2373 21.824C40.9733 21.824 41.5893 21.656 42.0853 21.32C42.5813 20.984 42.8613 20.496 42.9253 19.856ZM53.781 23C52.757 23 51.813 22.8 50.949 22.4C50.085 22 49.397 21.432 48.885 20.696C48.373 19.96 48.117 19.112 48.117 18.152C48.117 17.08 48.317 16.08 48.717 15.152C49.117 14.208 49.701 13.456 50.469 12.896C51.253 12.32 52.165 12.032 53.205 12.032C54.293 12.032 55.117 12.384 55.677 13.088C56.237 13.776 56.501 14.648 56.469 15.704C56.469 16.648 56.093 17.368 55.341 17.864C54.605 18.36 53.661 18.608 52.509 18.608C52.333 18.608 52.069 18.592 51.717 18.56C51.141 18.496 50.733 18.408 50.493 18.296C50.253 18.184 50.133 17.96 50.133 17.624C50.133 17.512 50.165 17.432 50.229 17.384C50.293 17.32 50.421 17.288 50.613 17.288C50.821 17.288 51.189 17.336 51.717 17.432C52.229 17.528 52.685 17.576 53.085 17.576C54.557 17.576 55.293 16.936 55.293 15.656C55.293 14.888 55.149 14.28 54.861 13.832C54.589 13.384 54.101 13.16 53.397 13.16C52.629 13.16 51.941 13.368 51.333 13.784C50.725 14.184 50.253 14.712 49.917 15.368C49.597 16.024 49.437 16.72 49.437 17.456C49.437 18.72 49.789 19.76 50.493 20.576C51.197 21.376 52.285 21.776 53.757 21.776C53.933 21.776 54.229 21.76 54.645 21.728C54.821 21.712 55.037 21.664 55.293 21.584C55.549 21.504 55.733 21.448 55.845 21.416C56.533 21.176 57.037 21.056 57.357 21.056C57.597 21.056 57.781 21.12 57.909 21.248C57.509 21.856 56.909 22.304 56.109 22.592C55.325 22.864 54.549 23 53.781 23ZM63.5548 23.096C63.3308 23.16 63.2028 23.192 63.1708 23.192C63.0428 23.192 62.9068 23.128 62.7628 23C62.2348 22.216 61.8508 20.848 61.6108 18.896C61.3868 16.944 61.2748 15.264 61.2748 13.856C61.2748 13.632 61.4348 13.52 61.7548 13.52C62.2348 13.52 62.4748 13.784 62.4748 14.312C62.4748 14.456 62.4668 14.576 62.4508 14.672C62.5948 14.336 62.8668 13.992 63.2668 13.64C63.6668 13.288 64.1308 12.992 64.6588 12.752C65.1868 12.512 65.7228 12.392 66.2668 12.392C67.9788 12.392 69.2268 13.152 70.0108 14.672C70.7948 16.176 71.1868 18.048 71.1868 20.288C71.1868 21.056 71.1068 21.672 70.9468 22.136C70.7868 22.584 70.5708 22.808 70.2988 22.808C70.0108 22.808 69.8668 22.72 69.8668 22.544C69.9788 21.696 70.0348 20.864 70.0348 20.048C70.0348 17.984 69.6748 16.424 68.9548 15.368C68.2348 14.296 67.2828 13.76 66.0988 13.76C65.5228 13.76 64.9628 13.904 64.4188 14.192C63.8908 14.48 63.4588 14.88 63.1228 15.392C62.8028 15.904 62.6428 16.488 62.6428 17.144C62.6428 17.88 62.6828 18.52 62.7628 19.064C62.8428 19.608 62.9708 20.264 63.1468 21.032C63.3388 21.784 63.4748 22.472 63.5548 23.096ZM81.1748 23C80.1508 23 79.2068 22.8 78.3428 22.4C77.4788 22 76.7908 21.432 76.2788 20.696C75.7668 19.96 75.5108 19.112 75.5108 18.152C75.5108 17.08 75.7108 16.08 76.1108 15.152C76.5108 14.208 77.0948 13.456 77.8628 12.896C78.6468 12.32 79.5588 12.032 80.5988 12.032C81.6868 12.032 82.5108 12.384 83.0708 13.088C83.6308 13.776 83.8948 14.648 83.8628 15.704C83.8628 16.648 83.4868 17.368 82.7348 17.864C81.9988 18.36 81.0548 18.608 79.9028 18.608C79.7268 18.608 79.4628 18.592 79.1108 18.56C78.5348 18.496 78.1268 18.408 77.8868 18.296C77.6468 18.184 77.5268 17.96 77.5268 17.624C77.5268 17.512 77.5588 17.432 77.6228 17.384C77.6868 17.32 77.8148 17.288 78.0068 17.288C78.2148 17.288 78.5828 17.336 79.1108 17.432C79.6228 17.528 80.0788 17.576 80.4788 17.576C81.9508 17.576 82.6868 16.936 82.6868 15.656C82.6868 14.888 82.5428 14.28 82.2548 13.832C81.9828 13.384 81.4948 13.16 80.7908 13.16C80.0228 13.16 79.3348 13.368 78.7268 13.784C78.1188 14.184 77.6468 14.712 77.3108 15.368C76.9908 16.024 76.8308 16.72 76.8308 17.456C76.8308 18.72 77.1828 19.76 77.8868 20.576C78.5908 21.376 79.6788 21.776 81.1508 21.776C81.3268 21.776 81.6228 21.76 82.0388 21.728C82.2148 21.712 82.4308 21.664 82.6868 21.584C82.9428 21.504 83.1268 21.448 83.2388 21.416C83.9268 21.176 84.4308 21.056 84.7508 21.056C84.9908 21.056 85.1748 21.12 85.3028 21.248C84.9028 21.856 84.3028 22.304 83.5028 22.592C82.7188 22.864 81.9428 23 81.1748 23ZM97.2846 20.312C97.6046 20.552 97.7646 20.808 97.7646 21.08C97.7646 21.512 97.3966 21.872 96.6606 22.16C95.9246 22.448 95.0926 22.664 94.1646 22.808C93.2366 22.936 92.5006 23 91.9566 23C91.3486 23 90.7646 22.904 90.2046 22.712C89.6606 22.504 89.3886 22.152 89.3886 21.656C89.3886 21.176 89.6526 20.552 90.1806 19.784C90.7246 19.016 91.3726 18.232 92.1246 17.432H89.0286C88.8686 17.432 88.7886 17.288 88.7886 17C88.7886 16.776 88.8126 16.624 88.8606 16.544C88.9086 16.448 88.9726 16.392 89.0526 16.376C89.1326 16.36 89.2846 16.352 89.5086 16.352H93.2046C93.7966 15.6 94.2446 14.96 94.5486 14.432C94.8686 13.888 95.0286 13.384 95.0286 12.92C95.0286 12.456 94.8686 12.04 94.5486 11.672C94.0526 11.576 93.5726 11.528 93.1086 11.528C92.2286 11.528 91.4846 11.68 90.8766 11.984C90.2686 12.272 89.9326 12.656 89.8686 13.136C89.5006 13.136 89.2526 13.072 89.1246 12.944C89.0126 12.816 88.9566 12.6 88.9566 12.296C88.9566 11.976 89.1166 11.672 89.4366 11.384C89.7726 11.08 90.2366 10.84 90.8286 10.664C91.4206 10.472 92.0846 10.376 92.8206 10.376C93.4286 10.376 94.0686 10.448 94.7406 10.592C95.1566 10.672 95.5086 10.936 95.7966 11.384C96.0846 11.832 96.2286 12.328 96.2286 12.872C96.2286 13.352 96.0766 13.856 95.7726 14.384C95.4846 14.912 95.0526 15.568 94.4766 16.352H95.6526C96.2606 16.352 96.6606 16.384 96.8526 16.448C97.0606 16.512 97.1646 16.64 97.1646 16.832C97.1646 16.992 97.1086 17.128 96.9966 17.24C96.9006 17.352 96.7966 17.408 96.6846 17.408H93.3726C92.5886 18.288 91.9886 19.072 91.5726 19.76C91.1566 20.432 90.9886 20.912 91.0686 21.2C91.1326 21.504 91.6286 21.712 92.5566 21.824C93.5966 21.824 94.4766 21.704 95.1966 21.464C95.9166 21.208 96.6126 20.824 97.2846 20.312ZM106.787 23C105.763 23 104.819 22.8 103.955 22.4C103.091 22 102.403 21.432 101.891 20.696C101.379 19.96 101.123 19.112 101.123 18.152C101.123 17.08 101.323 16.08 101.723 15.152C102.123 14.208 102.707 13.456 103.475 12.896C104.259 12.32 105.171 12.032 106.211 12.032C107.299 12.032 108.123 12.384 108.683 13.088C109.243 13.776 109.507 14.648 109.475 15.704C109.475 16.648 109.099 17.368 108.347 17.864C107.611 18.36 106.667 18.608 105.515 18.608C105.339 18.608 105.075 18.592 104.723 18.56C104.147 18.496 103.739 18.408 103.499 18.296C103.259 18.184 103.139 17.96 103.139 17.624C103.139 17.512 103.171 17.432 103.235 17.384C103.299 17.32 103.427 17.288 103.619 17.288C103.827 17.288 104.195 17.336 104.723 17.432C105.235 17.528 105.691 17.576 106.091 17.576C107.563 17.576 108.299 16.936 108.299 15.656C108.299 14.888 108.155 14.28 107.867 13.832C107.595 13.384 107.107 13.16 106.403 13.16C105.635 13.16 104.947 13.368 104.339 13.784C103.731 14.184 103.259 14.712 102.923 15.368C102.603 16.024 102.443 16.72 102.443 17.456C102.443 18.72 102.795 19.76 103.499 20.576C104.203 21.376 105.291 21.776 106.763 21.776C106.939 21.776 107.235 21.76 107.651 21.728C107.827 21.712 108.043 21.664 108.299 21.584C108.555 21.504 108.739 21.448 108.851 21.416C109.539 21.176 110.043 21.056 110.363 21.056C110.603 21.056 110.787 21.12 110.915 21.248C110.515 21.856 109.915 22.304 109.115 22.592C108.331 22.864 107.555 23 106.787 23ZM116.393 23C115.737 21.72 115.217 20.216 114.833 18.488C114.465 16.76 114.281 15.264 114.281 14C114.281 13.504 114.393 13.184 114.617 13.04C114.745 12.96 114.841 12.92 114.905 12.92C115.017 12.92 115.097 13.008 115.145 13.184C115.209 13.36 115.273 13.68 115.337 14.144L115.457 15.008C115.633 14.144 115.969 13.464 116.465 12.968C116.977 12.456 117.601 12.2 118.337 12.2C119.153 12.2 119.761 12.36 120.161 12.68C120.561 12.984 120.761 13.496 120.761 14.216C119.961 13.832 119.233 13.64 118.577 13.64C117.953 13.64 117.417 13.808 116.969 14.144C116.521 14.48 116.209 14.976 116.033 15.632C115.889 16.08 115.817 16.504 115.817 16.904C115.817 17.336 115.873 17.744 115.985 18.128C116.113 18.496 116.305 18.952 116.561 19.496C116.801 20.056 116.985 20.536 117.113 20.936C117.257 21.336 117.337 21.768 117.353 22.232C117.353 22.504 117.257 22.704 117.065 22.832C116.873 22.944 116.649 23 116.393 23Z\"\n        fill=\"#592DA3\"\n      />\n      <g filter=\"url(#filter0_f)\">\n        <path\n          d=\"M14.3878 21.32C14.1318 21.32 13.7398 21.224 13.2118 21.032C13.1158 21 13.0038 20.968 12.8758 20.936C12.7638 20.888 12.6198 20.84 12.4438 20.792C11.1318 20.408 9.69984 19.896 8.14784 19.256C6.59584 18.616 5.81984 18.008 5.81984 17.432C5.81984 17.064 5.93184 16.752 6.15584 16.496C7.57984 15.2 8.90784 14.216 10.1398 13.544C11.3718 12.856 12.8118 12.208 14.4598 11.6C14.6998 11.52 14.8998 11.592 15.0598 11.816C15.2198 12.04 15.3078 12.248 15.3238 12.44C14.9078 12.728 14.1078 13.168 12.9238 13.76C11.7238 14.336 10.6998 14.888 9.85184 15.416C9.01984 15.928 8.29184 16.528 7.66784 17.216C8.91584 17.856 10.1078 18.392 11.2438 18.824C12.3798 19.256 13.2118 19.496 13.7398 19.544C14.1238 19.576 14.4278 19.688 14.6518 19.88C14.8918 20.056 15.0118 20.296 15.0118 20.6C15.0118 20.84 14.9638 21.024 14.8678 21.152C14.7718 21.264 14.6118 21.32 14.3878 21.32ZM124.063 23C123.871 23 123.711 22.92 123.583 22.76C123.455 22.584 123.391 22.4 123.391 22.208C123.391 21.856 123.535 21.328 123.823 20.624C124.127 19.904 124.423 19.264 124.711 18.704L128.575 8.144C128.607 7.888 128.639 7.704 128.671 7.592C128.783 6.872 128.903 6.288 129.031 5.84C129.175 5.392 129.391 5.112 129.679 5C129.903 5.048 130.039 5.152 130.087 5.312C130.135 5.456 130.151 5.608 130.135 5.768C130.135 5.912 130.135 6.016 130.135 6.08C130.135 6.704 129.687 8.44 128.791 11.288C127.911 14.136 126.983 16.8 126.007 19.28C125.031 21.76 124.383 23 124.063 23ZM133.964 21.584C133.724 21.584 133.564 21.512 133.484 21.368C133.42 21.224 133.388 21.024 133.388 20.768C133.452 20.576 133.692 20.352 134.108 20.096C134.524 19.84 135.156 19.504 136.004 19.088C137.188 18.512 138.18 17.976 138.98 17.48C139.796 16.984 140.388 16.464 140.756 15.92C138.964 15.312 137.404 14.672 136.076 14C134.764 13.328 134.036 12.68 133.892 12.056C133.876 12.008 133.868 11.936 133.868 11.84C133.868 11.68 133.908 11.552 133.988 11.456C134.068 11.36 134.188 11.312 134.348 11.312C134.62 11.312 134.844 11.368 135.02 11.48C135.212 11.592 135.42 11.76 135.644 11.984C136.012 12.32 136.324 12.544 136.58 12.656C136.884 12.784 137.34 13.008 137.948 13.328C138.812 13.776 139.556 14.128 140.18 14.384C140.804 14.64 141.412 14.808 142.004 14.888C142.228 14.968 142.364 15.08 142.412 15.224C142.476 15.352 142.5 15.52 142.484 15.728C142.452 16.336 141.86 17.104 140.708 18.032C139.572 18.944 138.3 19.768 136.892 20.504C135.5 21.224 134.524 21.584 133.964 21.584Z\"\n          fill=\"#D1D1D1\"\n        />\n        <path\n          d=\"M25.5435 23C24.5195 23 23.5755 22.8 22.7115 22.4C21.8475 22 21.1595 21.432 20.6475 20.696C20.1355 19.96 19.8795 19.112 19.8795 18.152C19.8795 17.08 20.0795 16.08 20.4795 15.152C20.8795 14.208 21.4635 13.456 22.2315 12.896C23.0155 12.32 23.9275 12.032 24.9675 12.032C26.0555 12.032 26.8795 12.384 27.4395 13.088C27.9995 13.776 28.2635 14.648 28.2315 15.704C28.2315 16.648 27.8555 17.368 27.1035 17.864C26.3675 18.36 25.4235 18.608 24.2715 18.608C24.0955 18.608 23.8315 18.592 23.4795 18.56C22.9035 18.496 22.4955 18.408 22.2555 18.296C22.0155 18.184 21.8955 17.96 21.8955 17.624C21.8955 17.512 21.9275 17.432 21.9915 17.384C22.0555 17.32 22.1835 17.288 22.3755 17.288C22.5835 17.288 22.9515 17.336 23.4795 17.432C23.9915 17.528 24.4475 17.576 24.8475 17.576C26.3195 17.576 27.0555 16.936 27.0555 15.656C27.0555 14.888 26.9115 14.28 26.6235 13.832C26.3515 13.384 25.8635 13.16 25.1595 13.16C24.3915 13.16 23.7035 13.368 23.0955 13.784C22.4875 14.184 22.0155 14.712 21.6795 15.368C21.3595 16.024 21.1995 16.72 21.1995 17.456C21.1995 18.72 21.5515 19.76 22.2555 20.576C22.9595 21.376 24.0475 21.776 25.5195 21.776C25.6955 21.776 25.9915 21.76 26.4075 21.728C26.5835 21.712 26.7995 21.664 27.0555 21.584C27.3115 21.504 27.4955 21.448 27.6075 21.416C28.2955 21.176 28.7995 21.056 29.1195 21.056C29.3595 21.056 29.5435 21.12 29.6715 21.248C29.2715 21.856 28.6715 22.304 27.8715 22.592C27.0875 22.864 26.3115 23 25.5435 23ZM39.4933 23.024C38.2133 23.024 37.2053 22.776 36.4693 22.28C35.7333 21.768 35.1893 21 34.8373 19.976C34.4853 18.936 34.2533 17.544 34.1413 15.8L33.4453 11.744C33.3813 11.152 33.2933 10.576 33.1813 10.016C33.0693 9.456 33.0133 9.056 33.0133 8.816C33.0133 8.48 33.1093 8.232 33.3013 8.072C33.4933 7.896 33.8373 7.776 34.3333 7.712C34.4293 8.512 34.4933 9.112 34.5253 9.512C34.7013 11.064 34.8453 12.256 34.9573 13.088C35.0853 13.904 35.2453 14.76 35.4373 15.656C36.6693 15.112 37.8533 14.84 38.9893 14.84C40.0133 14.84 40.9253 15.056 41.7253 15.488C42.5253 15.904 43.1493 16.496 43.5973 17.264C44.0453 18.016 44.2693 18.864 44.2693 19.808C44.2693 20.912 43.7813 21.728 42.8053 22.256C41.8453 22.768 40.7413 23.024 39.4933 23.024ZM42.9253 19.856C42.9413 19.744 42.9493 19.584 42.9493 19.376C42.9493 18.24 42.5573 17.392 41.7733 16.832C41.0053 16.272 39.9093 15.992 38.4853 15.992C37.6053 15.992 36.9173 16.168 36.4213 16.52C35.9413 16.856 35.7013 17.32 35.7013 17.912C35.7013 19.272 36.0693 20.264 36.8053 20.888C37.5573 21.512 38.7013 21.824 40.2373 21.824C40.9733 21.824 41.5893 21.656 42.0853 21.32C42.5813 20.984 42.8613 20.496 42.9253 19.856ZM53.781 23C52.757 23 51.813 22.8 50.949 22.4C50.085 22 49.397 21.432 48.885 20.696C48.373 19.96 48.117 19.112 48.117 18.152C48.117 17.08 48.317 16.08 48.717 15.152C49.117 14.208 49.701 13.456 50.469 12.896C51.253 12.32 52.165 12.032 53.205 12.032C54.293 12.032 55.117 12.384 55.677 13.088C56.237 13.776 56.501 14.648 56.469 15.704C56.469 16.648 56.093 17.368 55.341 17.864C54.605 18.36 53.661 18.608 52.509 18.608C52.333 18.608 52.069 18.592 51.717 18.56C51.141 18.496 50.733 18.408 50.493 18.296C50.253 18.184 50.133 17.96 50.133 17.624C50.133 17.512 50.165 17.432 50.229 17.384C50.293 17.32 50.421 17.288 50.613 17.288C50.821 17.288 51.189 17.336 51.717 17.432C52.229 17.528 52.685 17.576 53.085 17.576C54.557 17.576 55.293 16.936 55.293 15.656C55.293 14.888 55.149 14.28 54.861 13.832C54.589 13.384 54.101 13.16 53.397 13.16C52.629 13.16 51.941 13.368 51.333 13.784C50.725 14.184 50.253 14.712 49.917 15.368C49.597 16.024 49.437 16.72 49.437 17.456C49.437 18.72 49.789 19.76 50.493 20.576C51.197 21.376 52.285 21.776 53.757 21.776C53.933 21.776 54.229 21.76 54.645 21.728C54.821 21.712 55.037 21.664 55.293 21.584C55.549 21.504 55.733 21.448 55.845 21.416C56.533 21.176 57.037 21.056 57.357 21.056C57.597 21.056 57.781 21.12 57.909 21.248C57.509 21.856 56.909 22.304 56.109 22.592C55.325 22.864 54.549 23 53.781 23ZM63.5548 23.096C63.3308 23.16 63.2028 23.192 63.1708 23.192C63.0428 23.192 62.9068 23.128 62.7628 23C62.2348 22.216 61.8508 20.848 61.6108 18.896C61.3868 16.944 61.2748 15.264 61.2748 13.856C61.2748 13.632 61.4348 13.52 61.7548 13.52C62.2348 13.52 62.4748 13.784 62.4748 14.312C62.4748 14.456 62.4668 14.576 62.4508 14.672C62.5948 14.336 62.8668 13.992 63.2668 13.64C63.6668 13.288 64.1308 12.992 64.6588 12.752C65.1868 12.512 65.7228 12.392 66.2668 12.392C67.9788 12.392 69.2268 13.152 70.0108 14.672C70.7948 16.176 71.1868 18.048 71.1868 20.288C71.1868 21.056 71.1068 21.672 70.9468 22.136C70.7868 22.584 70.5708 22.808 70.2988 22.808C70.0108 22.808 69.8668 22.72 69.8668 22.544C69.9788 21.696 70.0348 20.864 70.0348 20.048C70.0348 17.984 69.6748 16.424 68.9548 15.368C68.2348 14.296 67.2828 13.76 66.0988 13.76C65.5228 13.76 64.9628 13.904 64.4188 14.192C63.8908 14.48 63.4588 14.88 63.1228 15.392C62.8028 15.904 62.6428 16.488 62.6428 17.144C62.6428 17.88 62.6828 18.52 62.7628 19.064C62.8428 19.608 62.9708 20.264 63.1468 21.032C63.3388 21.784 63.4748 22.472 63.5548 23.096ZM81.1748 23C80.1508 23 79.2068 22.8 78.3428 22.4C77.4788 22 76.7908 21.432 76.2788 20.696C75.7668 19.96 75.5108 19.112 75.5108 18.152C75.5108 17.08 75.7108 16.08 76.1108 15.152C76.5108 14.208 77.0948 13.456 77.8628 12.896C78.6468 12.32 79.5588 12.032 80.5988 12.032C81.6868 12.032 82.5108 12.384 83.0708 13.088C83.6308 13.776 83.8948 14.648 83.8628 15.704C83.8628 16.648 83.4868 17.368 82.7348 17.864C81.9988 18.36 81.0548 18.608 79.9028 18.608C79.7268 18.608 79.4628 18.592 79.1108 18.56C78.5348 18.496 78.1268 18.408 77.8868 18.296C77.6468 18.184 77.5268 17.96 77.5268 17.624C77.5268 17.512 77.5588 17.432 77.6228 17.384C77.6868 17.32 77.8148 17.288 78.0068 17.288C78.2148 17.288 78.5828 17.336 79.1108 17.432C79.6228 17.528 80.0788 17.576 80.4788 17.576C81.9508 17.576 82.6868 16.936 82.6868 15.656C82.6868 14.888 82.5428 14.28 82.2548 13.832C81.9828 13.384 81.4948 13.16 80.7908 13.16C80.0228 13.16 79.3348 13.368 78.7268 13.784C78.1188 14.184 77.6468 14.712 77.3108 15.368C76.9908 16.024 76.8308 16.72 76.8308 17.456C76.8308 18.72 77.1828 19.76 77.8868 20.576C78.5908 21.376 79.6788 21.776 81.1508 21.776C81.3268 21.776 81.6228 21.76 82.0388 21.728C82.2148 21.712 82.4308 21.664 82.6868 21.584C82.9428 21.504 83.1268 21.448 83.2388 21.416C83.9268 21.176 84.4308 21.056 84.7508 21.056C84.9908 21.056 85.1748 21.12 85.3028 21.248C84.9028 21.856 84.3028 22.304 83.5028 22.592C82.7188 22.864 81.9428 23 81.1748 23ZM97.2846 20.312C97.6046 20.552 97.7646 20.808 97.7646 21.08C97.7646 21.512 97.3966 21.872 96.6606 22.16C95.9246 22.448 95.0926 22.664 94.1646 22.808C93.2366 22.936 92.5006 23 91.9566 23C91.3486 23 90.7646 22.904 90.2046 22.712C89.6606 22.504 89.3886 22.152 89.3886 21.656C89.3886 21.176 89.6526 20.552 90.1806 19.784C90.7246 19.016 91.3726 18.232 92.1246 17.432H89.0286C88.8686 17.432 88.7886 17.288 88.7886 17C88.7886 16.776 88.8126 16.624 88.8606 16.544C88.9086 16.448 88.9726 16.392 89.0526 16.376C89.1326 16.36 89.2846 16.352 89.5086 16.352H93.2046C93.7966 15.6 94.2446 14.96 94.5486 14.432C94.8686 13.888 95.0286 13.384 95.0286 12.92C95.0286 12.456 94.8686 12.04 94.5486 11.672C94.0526 11.576 93.5726 11.528 93.1086 11.528C92.2286 11.528 91.4846 11.68 90.8766 11.984C90.2686 12.272 89.9326 12.656 89.8686 13.136C89.5006 13.136 89.2526 13.072 89.1246 12.944C89.0126 12.816 88.9566 12.6 88.9566 12.296C88.9566 11.976 89.1166 11.672 89.4366 11.384C89.7726 11.08 90.2366 10.84 90.8286 10.664C91.4206 10.472 92.0846 10.376 92.8206 10.376C93.4286 10.376 94.0686 10.448 94.7406 10.592C95.1566 10.672 95.5086 10.936 95.7966 11.384C96.0846 11.832 96.2286 12.328 96.2286 12.872C96.2286 13.352 96.0766 13.856 95.7726 14.384C95.4846 14.912 95.0526 15.568 94.4766 16.352H95.6526C96.2606 16.352 96.6606 16.384 96.8526 16.448C97.0606 16.512 97.1646 16.64 97.1646 16.832C97.1646 16.992 97.1086 17.128 96.9966 17.24C96.9006 17.352 96.7966 17.408 96.6846 17.408H93.3726C92.5886 18.288 91.9886 19.072 91.5726 19.76C91.1566 20.432 90.9886 20.912 91.0686 21.2C91.1326 21.504 91.6286 21.712 92.5566 21.824C93.5966 21.824 94.4766 21.704 95.1966 21.464C95.9166 21.208 96.6126 20.824 97.2846 20.312ZM106.787 23C105.763 23 104.819 22.8 103.955 22.4C103.091 22 102.403 21.432 101.891 20.696C101.379 19.96 101.123 19.112 101.123 18.152C101.123 17.08 101.323 16.08 101.723 15.152C102.123 14.208 102.707 13.456 103.475 12.896C104.259 12.32 105.171 12.032 106.211 12.032C107.299 12.032 108.123 12.384 108.683 13.088C109.243 13.776 109.507 14.648 109.475 15.704C109.475 16.648 109.099 17.368 108.347 17.864C107.611 18.36 106.667 18.608 105.515 18.608C105.339 18.608 105.075 18.592 104.723 18.56C104.147 18.496 103.739 18.408 103.499 18.296C103.259 18.184 103.139 17.96 103.139 17.624C103.139 17.512 103.171 17.432 103.235 17.384C103.299 17.32 103.427 17.288 103.619 17.288C103.827 17.288 104.195 17.336 104.723 17.432C105.235 17.528 105.691 17.576 106.091 17.576C107.563 17.576 108.299 16.936 108.299 15.656C108.299 14.888 108.155 14.28 107.867 13.832C107.595 13.384 107.107 13.16 106.403 13.16C105.635 13.16 104.947 13.368 104.339 13.784C103.731 14.184 103.259 14.712 102.923 15.368C102.603 16.024 102.443 16.72 102.443 17.456C102.443 18.72 102.795 19.76 103.499 20.576C104.203 21.376 105.291 21.776 106.763 21.776C106.939 21.776 107.235 21.76 107.651 21.728C107.827 21.712 108.043 21.664 108.299 21.584C108.555 21.504 108.739 21.448 108.851 21.416C109.539 21.176 110.043 21.056 110.363 21.056C110.603 21.056 110.787 21.12 110.915 21.248C110.515 21.856 109.915 22.304 109.115 22.592C108.331 22.864 107.555 23 106.787 23ZM116.393 23C115.737 21.72 115.217 20.216 114.833 18.488C114.465 16.76 114.281 15.264 114.281 14C114.281 13.504 114.393 13.184 114.617 13.04C114.745 12.96 114.841 12.92 114.905 12.92C115.017 12.92 115.097 13.008 115.145 13.184C115.209 13.36 115.273 13.68 115.337 14.144L115.457 15.008C115.633 14.144 115.969 13.464 116.465 12.968C116.977 12.456 117.601 12.2 118.337 12.2C119.153 12.2 119.761 12.36 120.161 12.68C120.561 12.984 120.761 13.496 120.761 14.216C119.961 13.832 119.233 13.64 118.577 13.64C117.953 13.64 117.417 13.808 116.969 14.144C116.521 14.48 116.209 14.976 116.033 15.632C115.889 16.08 115.817 16.504 115.817 16.904C115.817 17.336 115.873 17.744 115.985 18.128C116.113 18.496 116.305 18.952 116.561 19.496C116.801 20.056 116.985 20.536 117.113 20.936C117.257 21.336 117.337 21.768 117.353 22.232C117.353 22.504 117.257 22.704 117.065 22.832C116.873 22.944 116.649 23 116.393 23Z\"\n          fill=\"#592DA3\"\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_f\"\n          x=\"0.819847\"\n          y=\"0\"\n          width=\"146.669\"\n          height=\"28.192\"\n          filterUnits=\"userSpaceOnUse\"\n          color-interpolation-filters=\"sRGB\"\n        >\n          <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend\n            mode=\"normal\"\n            in=\"SourceGraphic\"\n            in2=\"BackgroundImageFix\"\n            result=\"shape\"\n          />\n          <feGaussianBlur stdDeviation=\"2.5\" result=\"effect1_foregroundBlur\" />\n        </filter>\n      </defs>\n    </svg>\n  );\n};\n\nexport const Dark = () => {\n  return (\n    <svg\n      width=\"146\"\n      height=\"27\"\n      viewBox=\"0 0 146 27\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M13.3878 20.32C13.1318 20.32 12.7398 20.224 12.2118 20.032C12.1158 20 12.0038 19.968 11.8758 19.936C11.7638 19.888 11.6198 19.84 11.4438 19.792C10.1318 19.408 8.69984 18.896 7.14784 18.256C5.59584 17.616 4.81984 17.008 4.81984 16.432C4.81984 16.064 4.93184 15.752 5.15584 15.496C6.57984 14.2 7.90784 13.216 9.13984 12.544C10.3718 11.856 11.8118 11.208 13.4598 10.6C13.6998 10.52 13.8998 10.592 14.0598 10.816C14.2198 11.04 14.3078 11.248 14.3238 11.44C13.9078 11.728 13.1078 12.168 11.9238 12.76C10.7238 13.336 9.69984 13.888 8.85184 14.416C8.01984 14.928 7.29184 15.528 6.66784 16.216C7.91584 16.856 9.10784 17.392 10.2438 17.824C11.3798 18.256 12.2118 18.496 12.7398 18.544C13.1238 18.576 13.4278 18.688 13.6518 18.88C13.8918 19.056 14.0118 19.296 14.0118 19.6C14.0118 19.84 13.9638 20.024 13.8678 20.152C13.7718 20.264 13.6118 20.32 13.3878 20.32ZM123.063 22C122.871 22 122.711 21.92 122.583 21.76C122.455 21.584 122.391 21.4 122.391 21.208C122.391 20.856 122.535 20.328 122.823 19.624C123.127 18.904 123.423 18.264 123.711 17.704L127.575 7.144C127.607 6.888 127.639 6.704 127.671 6.592C127.783 5.872 127.903 5.288 128.031 4.84C128.175 4.392 128.391 4.112 128.679 4C128.903 4.048 129.039 4.152 129.087 4.312C129.135 4.456 129.151 4.608 129.135 4.768C129.135 4.912 129.135 5.016 129.135 5.08C129.135 5.704 128.687 7.44 127.791 10.288C126.911 13.136 125.983 15.8 125.007 18.28C124.031 20.76 123.383 22 123.063 22ZM132.964 20.584C132.724 20.584 132.564 20.512 132.484 20.368C132.42 20.224 132.388 20.024 132.388 19.768C132.452 19.576 132.692 19.352 133.108 19.096C133.524 18.84 134.156 18.504 135.004 18.088C136.188 17.512 137.18 16.976 137.98 16.48C138.796 15.984 139.388 15.464 139.756 14.92C137.964 14.312 136.404 13.672 135.076 13C133.764 12.328 133.036 11.68 132.892 11.056C132.876 11.008 132.868 10.936 132.868 10.84C132.868 10.68 132.908 10.552 132.988 10.456C133.068 10.36 133.188 10.312 133.348 10.312C133.62 10.312 133.844 10.368 134.02 10.48C134.212 10.592 134.42 10.76 134.644 10.984C135.012 11.32 135.324 11.544 135.58 11.656C135.884 11.784 136.34 12.008 136.948 12.328C137.812 12.776 138.556 13.128 139.18 13.384C139.804 13.64 140.412 13.808 141.004 13.888C141.228 13.968 141.364 14.08 141.412 14.224C141.476 14.352 141.5 14.52 141.484 14.728C141.452 15.336 140.86 16.104 139.708 17.032C138.572 17.944 137.3 18.768 135.892 19.504C134.5 20.224 133.524 20.584 132.964 20.584Z\"\n        fill=\"#D1D1D1\"\n      />\n      <path\n        d=\"M24.5435 22C23.5195 22 22.5755 21.8 21.7115 21.4C20.8475 21 20.1595 20.432 19.6475 19.696C19.1355 18.96 18.8795 18.112 18.8795 17.152C18.8795 16.08 19.0795 15.08 19.4795 14.152C19.8795 13.208 20.4635 12.456 21.2315 11.896C22.0155 11.32 22.9275 11.032 23.9675 11.032C25.0555 11.032 25.8795 11.384 26.4395 12.088C26.9995 12.776 27.2635 13.648 27.2315 14.704C27.2315 15.648 26.8555 16.368 26.1035 16.864C25.3675 17.36 24.4235 17.608 23.2715 17.608C23.0955 17.608 22.8315 17.592 22.4795 17.56C21.9035 17.496 21.4955 17.408 21.2555 17.296C21.0155 17.184 20.8955 16.96 20.8955 16.624C20.8955 16.512 20.9275 16.432 20.9915 16.384C21.0555 16.32 21.1835 16.288 21.3755 16.288C21.5835 16.288 21.9515 16.336 22.4795 16.432C22.9915 16.528 23.4475 16.576 23.8475 16.576C25.3195 16.576 26.0555 15.936 26.0555 14.656C26.0555 13.888 25.9115 13.28 25.6235 12.832C25.3515 12.384 24.8635 12.16 24.1595 12.16C23.3915 12.16 22.7035 12.368 22.0955 12.784C21.4875 13.184 21.0155 13.712 20.6795 14.368C20.3595 15.024 20.1995 15.72 20.1995 16.456C20.1995 17.72 20.5515 18.76 21.2555 19.576C21.9595 20.376 23.0475 20.776 24.5195 20.776C24.6955 20.776 24.9915 20.76 25.4075 20.728C25.5835 20.712 25.7995 20.664 26.0555 20.584C26.3115 20.504 26.4955 20.448 26.6075 20.416C27.2955 20.176 27.7995 20.056 28.1195 20.056C28.3595 20.056 28.5435 20.12 28.6715 20.248C28.2715 20.856 27.6715 21.304 26.8715 21.592C26.0875 21.864 25.3115 22 24.5435 22ZM38.4933 22.024C37.2133 22.024 36.2053 21.776 35.4693 21.28C34.7333 20.768 34.1893 20 33.8373 18.976C33.4853 17.936 33.2533 16.544 33.1413 14.8L32.4453 10.744C32.3813 10.152 32.2933 9.576 32.1813 9.016C32.0693 8.456 32.0133 8.056 32.0133 7.816C32.0133 7.48 32.1093 7.232 32.3013 7.072C32.4933 6.896 32.8373 6.776 33.3333 6.712C33.4293 7.512 33.4933 8.112 33.5253 8.512C33.7013 10.064 33.8453 11.256 33.9573 12.088C34.0853 12.904 34.2453 13.76 34.4373 14.656C35.6693 14.112 36.8533 13.84 37.9893 13.84C39.0133 13.84 39.9253 14.056 40.7253 14.488C41.5253 14.904 42.1493 15.496 42.5973 16.264C43.0453 17.016 43.2693 17.864 43.2693 18.808C43.2693 19.912 42.7813 20.728 41.8053 21.256C40.8453 21.768 39.7413 22.024 38.4933 22.024ZM41.9253 18.856C41.9413 18.744 41.9493 18.584 41.9493 18.376C41.9493 17.24 41.5573 16.392 40.7733 15.832C40.0053 15.272 38.9093 14.992 37.4853 14.992C36.6053 14.992 35.9173 15.168 35.4213 15.52C34.9413 15.856 34.7013 16.32 34.7013 16.912C34.7013 18.272 35.0693 19.264 35.8053 19.888C36.5573 20.512 37.7013 20.824 39.2373 20.824C39.9733 20.824 40.5893 20.656 41.0853 20.32C41.5813 19.984 41.8613 19.496 41.9253 18.856ZM52.781 22C51.757 22 50.813 21.8 49.949 21.4C49.085 21 48.397 20.432 47.885 19.696C47.373 18.96 47.117 18.112 47.117 17.152C47.117 16.08 47.317 15.08 47.717 14.152C48.117 13.208 48.701 12.456 49.469 11.896C50.253 11.32 51.165 11.032 52.205 11.032C53.293 11.032 54.117 11.384 54.677 12.088C55.237 12.776 55.501 13.648 55.469 14.704C55.469 15.648 55.093 16.368 54.341 16.864C53.605 17.36 52.661 17.608 51.509 17.608C51.333 17.608 51.069 17.592 50.717 17.56C50.141 17.496 49.733 17.408 49.493 17.296C49.253 17.184 49.133 16.96 49.133 16.624C49.133 16.512 49.165 16.432 49.229 16.384C49.293 16.32 49.421 16.288 49.613 16.288C49.821 16.288 50.189 16.336 50.717 16.432C51.229 16.528 51.685 16.576 52.085 16.576C53.557 16.576 54.293 15.936 54.293 14.656C54.293 13.888 54.149 13.28 53.861 12.832C53.589 12.384 53.101 12.16 52.397 12.16C51.629 12.16 50.941 12.368 50.333 12.784C49.725 13.184 49.253 13.712 48.917 14.368C48.597 15.024 48.437 15.72 48.437 16.456C48.437 17.72 48.789 18.76 49.493 19.576C50.197 20.376 51.285 20.776 52.757 20.776C52.933 20.776 53.229 20.76 53.645 20.728C53.821 20.712 54.037 20.664 54.293 20.584C54.549 20.504 54.733 20.448 54.845 20.416C55.533 20.176 56.037 20.056 56.357 20.056C56.597 20.056 56.781 20.12 56.909 20.248C56.509 20.856 55.909 21.304 55.109 21.592C54.325 21.864 53.549 22 52.781 22ZM62.5548 22.096C62.3308 22.16 62.2028 22.192 62.1708 22.192C62.0428 22.192 61.9068 22.128 61.7628 22C61.2348 21.216 60.8508 19.848 60.6108 17.896C60.3868 15.944 60.2748 14.264 60.2748 12.856C60.2748 12.632 60.4348 12.52 60.7548 12.52C61.2348 12.52 61.4748 12.784 61.4748 13.312C61.4748 13.456 61.4668 13.576 61.4508 13.672C61.5948 13.336 61.8668 12.992 62.2668 12.64C62.6668 12.288 63.1308 11.992 63.6588 11.752C64.1868 11.512 64.7228 11.392 65.2668 11.392C66.9788 11.392 68.2268 12.152 69.0108 13.672C69.7948 15.176 70.1868 17.048 70.1868 19.288C70.1868 20.056 70.1068 20.672 69.9468 21.136C69.7868 21.584 69.5708 21.808 69.2988 21.808C69.0108 21.808 68.8668 21.72 68.8668 21.544C68.9788 20.696 69.0348 19.864 69.0348 19.048C69.0348 16.984 68.6748 15.424 67.9548 14.368C67.2348 13.296 66.2828 12.76 65.0988 12.76C64.5228 12.76 63.9628 12.904 63.4188 13.192C62.8908 13.48 62.4588 13.88 62.1228 14.392C61.8028 14.904 61.6428 15.488 61.6428 16.144C61.6428 16.88 61.6828 17.52 61.7628 18.064C61.8428 18.608 61.9708 19.264 62.1468 20.032C62.3388 20.784 62.4748 21.472 62.5548 22.096ZM80.1748 22C79.1508 22 78.2068 21.8 77.3428 21.4C76.4788 21 75.7908 20.432 75.2788 19.696C74.7668 18.96 74.5108 18.112 74.5108 17.152C74.5108 16.08 74.7108 15.08 75.1108 14.152C75.5108 13.208 76.0948 12.456 76.8628 11.896C77.6468 11.32 78.5588 11.032 79.5988 11.032C80.6868 11.032 81.5108 11.384 82.0708 12.088C82.6308 12.776 82.8948 13.648 82.8628 14.704C82.8628 15.648 82.4868 16.368 81.7348 16.864C80.9988 17.36 80.0548 17.608 78.9028 17.608C78.7268 17.608 78.4628 17.592 78.1108 17.56C77.5348 17.496 77.1268 17.408 76.8868 17.296C76.6468 17.184 76.5268 16.96 76.5268 16.624C76.5268 16.512 76.5588 16.432 76.6228 16.384C76.6868 16.32 76.8148 16.288 77.0068 16.288C77.2148 16.288 77.5828 16.336 78.1108 16.432C78.6228 16.528 79.0788 16.576 79.4788 16.576C80.9508 16.576 81.6868 15.936 81.6868 14.656C81.6868 13.888 81.5428 13.28 81.2548 12.832C80.9828 12.384 80.4948 12.16 79.7908 12.16C79.0228 12.16 78.3348 12.368 77.7268 12.784C77.1188 13.184 76.6468 13.712 76.3108 14.368C75.9908 15.024 75.8308 15.72 75.8308 16.456C75.8308 17.72 76.1828 18.76 76.8868 19.576C77.5908 20.376 78.6788 20.776 80.1508 20.776C80.3268 20.776 80.6228 20.76 81.0388 20.728C81.2148 20.712 81.4308 20.664 81.6868 20.584C81.9428 20.504 82.1268 20.448 82.2388 20.416C82.9268 20.176 83.4308 20.056 83.7508 20.056C83.9908 20.056 84.1748 20.12 84.3028 20.248C83.9028 20.856 83.3028 21.304 82.5028 21.592C81.7188 21.864 80.9428 22 80.1748 22ZM96.2846 19.312C96.6046 19.552 96.7646 19.808 96.7646 20.08C96.7646 20.512 96.3966 20.872 95.6606 21.16C94.9246 21.448 94.0926 21.664 93.1646 21.808C92.2366 21.936 91.5006 22 90.9566 22C90.3486 22 89.7646 21.904 89.2046 21.712C88.6606 21.504 88.3886 21.152 88.3886 20.656C88.3886 20.176 88.6526 19.552 89.1806 18.784C89.7246 18.016 90.3726 17.232 91.1246 16.432H88.0286C87.8686 16.432 87.7886 16.288 87.7886 16C87.7886 15.776 87.8126 15.624 87.8606 15.544C87.9086 15.448 87.9726 15.392 88.0526 15.376C88.1326 15.36 88.2846 15.352 88.5086 15.352H92.2046C92.7966 14.6 93.2446 13.96 93.5486 13.432C93.8686 12.888 94.0286 12.384 94.0286 11.92C94.0286 11.456 93.8686 11.04 93.5486 10.672C93.0526 10.576 92.5726 10.528 92.1086 10.528C91.2286 10.528 90.4846 10.68 89.8766 10.984C89.2686 11.272 88.9326 11.656 88.8686 12.136C88.5006 12.136 88.2526 12.072 88.1246 11.944C88.0126 11.816 87.9566 11.6 87.9566 11.296C87.9566 10.976 88.1166 10.672 88.4366 10.384C88.7726 10.08 89.2366 9.84 89.8286 9.664C90.4206 9.472 91.0846 9.376 91.8206 9.376C92.4286 9.376 93.0686 9.448 93.7406 9.592C94.1566 9.672 94.5086 9.936 94.7966 10.384C95.0846 10.832 95.2286 11.328 95.2286 11.872C95.2286 12.352 95.0766 12.856 94.7726 13.384C94.4846 13.912 94.0526 14.568 93.4766 15.352H94.6526C95.2606 15.352 95.6606 15.384 95.8526 15.448C96.0606 15.512 96.1646 15.64 96.1646 15.832C96.1646 15.992 96.1086 16.128 95.9966 16.24C95.9006 16.352 95.7966 16.408 95.6846 16.408H92.3726C91.5886 17.288 90.9886 18.072 90.5726 18.76C90.1566 19.432 89.9886 19.912 90.0686 20.2C90.1326 20.504 90.6286 20.712 91.5566 20.824C92.5966 20.824 93.4766 20.704 94.1966 20.464C94.9166 20.208 95.6126 19.824 96.2846 19.312ZM105.787 22C104.763 22 103.819 21.8 102.955 21.4C102.091 21 101.403 20.432 100.891 19.696C100.379 18.96 100.123 18.112 100.123 17.152C100.123 16.08 100.323 15.08 100.723 14.152C101.123 13.208 101.707 12.456 102.475 11.896C103.259 11.32 104.171 11.032 105.211 11.032C106.299 11.032 107.123 11.384 107.683 12.088C108.243 12.776 108.507 13.648 108.475 14.704C108.475 15.648 108.099 16.368 107.347 16.864C106.611 17.36 105.667 17.608 104.515 17.608C104.339 17.608 104.075 17.592 103.723 17.56C103.147 17.496 102.739 17.408 102.499 17.296C102.259 17.184 102.139 16.96 102.139 16.624C102.139 16.512 102.171 16.432 102.235 16.384C102.299 16.32 102.427 16.288 102.619 16.288C102.827 16.288 103.195 16.336 103.723 16.432C104.235 16.528 104.691 16.576 105.091 16.576C106.563 16.576 107.299 15.936 107.299 14.656C107.299 13.888 107.155 13.28 106.867 12.832C106.595 12.384 106.107 12.16 105.403 12.16C104.635 12.16 103.947 12.368 103.339 12.784C102.731 13.184 102.259 13.712 101.923 14.368C101.603 15.024 101.443 15.72 101.443 16.456C101.443 17.72 101.795 18.76 102.499 19.576C103.203 20.376 104.291 20.776 105.763 20.776C105.939 20.776 106.235 20.76 106.651 20.728C106.827 20.712 107.043 20.664 107.299 20.584C107.555 20.504 107.739 20.448 107.851 20.416C108.539 20.176 109.043 20.056 109.363 20.056C109.603 20.056 109.787 20.12 109.915 20.248C109.515 20.856 108.915 21.304 108.115 21.592C107.331 21.864 106.555 22 105.787 22ZM115.393 22C114.737 20.72 114.217 19.216 113.833 17.488C113.465 15.76 113.281 14.264 113.281 13C113.281 12.504 113.393 12.184 113.617 12.04C113.745 11.96 113.841 11.92 113.905 11.92C114.017 11.92 114.097 12.008 114.145 12.184C114.209 12.36 114.273 12.68 114.337 13.144L114.457 14.008C114.633 13.144 114.969 12.464 115.465 11.968C115.977 11.456 116.601 11.2 117.337 11.2C118.153 11.2 118.761 11.36 119.161 11.68C119.561 11.984 119.761 12.496 119.761 13.216C118.961 12.832 118.233 12.64 117.577 12.64C116.953 12.64 116.417 12.808 115.969 13.144C115.521 13.48 115.209 13.976 115.033 14.632C114.889 15.08 114.817 15.504 114.817 15.904C114.817 16.336 114.873 16.744 114.985 17.128C115.113 17.496 115.305 17.952 115.561 18.496C115.801 19.056 115.985 19.536 116.113 19.936C116.257 20.336 116.337 20.768 116.353 21.232C116.353 21.504 116.257 21.704 116.065 21.832C115.873 21.944 115.649 22 115.393 22Z\"\n        fill=\"white\"\n      />\n      <g filter=\"url(#filter0_f)\">\n        <path\n          d=\"M13.3878 20.32C13.1318 20.32 12.7398 20.224 12.2118 20.032C12.1158 20 12.0038 19.968 11.8758 19.936C11.7638 19.888 11.6198 19.84 11.4438 19.792C10.1318 19.408 8.69984 18.896 7.14784 18.256C5.59584 17.616 4.81984 17.008 4.81984 16.432C4.81984 16.064 4.93184 15.752 5.15584 15.496C6.57984 14.2 7.90784 13.216 9.13984 12.544C10.3718 11.856 11.8118 11.208 13.4598 10.6C13.6998 10.52 13.8998 10.592 14.0598 10.816C14.2198 11.04 14.3078 11.248 14.3238 11.44C13.9078 11.728 13.1078 12.168 11.9238 12.76C10.7238 13.336 9.69984 13.888 8.85184 14.416C8.01984 14.928 7.29184 15.528 6.66784 16.216C7.91584 16.856 9.10784 17.392 10.2438 17.824C11.3798 18.256 12.2118 18.496 12.7398 18.544C13.1238 18.576 13.4278 18.688 13.6518 18.88C13.8918 19.056 14.0118 19.296 14.0118 19.6C14.0118 19.84 13.9638 20.024 13.8678 20.152C13.7718 20.264 13.6118 20.32 13.3878 20.32ZM123.063 22C122.871 22 122.711 21.92 122.583 21.76C122.455 21.584 122.391 21.4 122.391 21.208C122.391 20.856 122.535 20.328 122.823 19.624C123.127 18.904 123.423 18.264 123.711 17.704L127.575 7.144C127.607 6.888 127.639 6.704 127.671 6.592C127.783 5.872 127.903 5.288 128.031 4.84C128.175 4.392 128.391 4.112 128.679 4C128.903 4.048 129.039 4.152 129.087 4.312C129.135 4.456 129.151 4.608 129.135 4.768C129.135 4.912 129.135 5.016 129.135 5.08C129.135 5.704 128.687 7.44 127.791 10.288C126.911 13.136 125.983 15.8 125.007 18.28C124.031 20.76 123.383 22 123.063 22ZM132.964 20.584C132.724 20.584 132.564 20.512 132.484 20.368C132.42 20.224 132.388 20.024 132.388 19.768C132.452 19.576 132.692 19.352 133.108 19.096C133.524 18.84 134.156 18.504 135.004 18.088C136.188 17.512 137.18 16.976 137.98 16.48C138.796 15.984 139.388 15.464 139.756 14.92C137.964 14.312 136.404 13.672 135.076 13C133.764 12.328 133.036 11.68 132.892 11.056C132.876 11.008 132.868 10.936 132.868 10.84C132.868 10.68 132.908 10.552 132.988 10.456C133.068 10.36 133.188 10.312 133.348 10.312C133.62 10.312 133.844 10.368 134.02 10.48C134.212 10.592 134.42 10.76 134.644 10.984C135.012 11.32 135.324 11.544 135.58 11.656C135.884 11.784 136.34 12.008 136.948 12.328C137.812 12.776 138.556 13.128 139.18 13.384C139.804 13.64 140.412 13.808 141.004 13.888C141.228 13.968 141.364 14.08 141.412 14.224C141.476 14.352 141.5 14.52 141.484 14.728C141.452 15.336 140.86 16.104 139.708 17.032C138.572 17.944 137.3 18.768 135.892 19.504C134.5 20.224 133.524 20.584 132.964 20.584Z\"\n          fill=\"#D1D1D1\"\n        />\n        <path\n          d=\"M24.5435 22C23.5195 22 22.5755 21.8 21.7115 21.4C20.8475 21 20.1595 20.432 19.6475 19.696C19.1355 18.96 18.8795 18.112 18.8795 17.152C18.8795 16.08 19.0795 15.08 19.4795 14.152C19.8795 13.208 20.4635 12.456 21.2315 11.896C22.0155 11.32 22.9275 11.032 23.9675 11.032C25.0555 11.032 25.8795 11.384 26.4395 12.088C26.9995 12.776 27.2635 13.648 27.2315 14.704C27.2315 15.648 26.8555 16.368 26.1035 16.864C25.3675 17.36 24.4235 17.608 23.2715 17.608C23.0955 17.608 22.8315 17.592 22.4795 17.56C21.9035 17.496 21.4955 17.408 21.2555 17.296C21.0155 17.184 20.8955 16.96 20.8955 16.624C20.8955 16.512 20.9275 16.432 20.9915 16.384C21.0555 16.32 21.1835 16.288 21.3755 16.288C21.5835 16.288 21.9515 16.336 22.4795 16.432C22.9915 16.528 23.4475 16.576 23.8475 16.576C25.3195 16.576 26.0555 15.936 26.0555 14.656C26.0555 13.888 25.9115 13.28 25.6235 12.832C25.3515 12.384 24.8635 12.16 24.1595 12.16C23.3915 12.16 22.7035 12.368 22.0955 12.784C21.4875 13.184 21.0155 13.712 20.6795 14.368C20.3595 15.024 20.1995 15.72 20.1995 16.456C20.1995 17.72 20.5515 18.76 21.2555 19.576C21.9595 20.376 23.0475 20.776 24.5195 20.776C24.6955 20.776 24.9915 20.76 25.4075 20.728C25.5835 20.712 25.7995 20.664 26.0555 20.584C26.3115 20.504 26.4955 20.448 26.6075 20.416C27.2955 20.176 27.7995 20.056 28.1195 20.056C28.3595 20.056 28.5435 20.12 28.6715 20.248C28.2715 20.856 27.6715 21.304 26.8715 21.592C26.0875 21.864 25.3115 22 24.5435 22ZM38.4933 22.024C37.2133 22.024 36.2053 21.776 35.4693 21.28C34.7333 20.768 34.1893 20 33.8373 18.976C33.4853 17.936 33.2533 16.544 33.1413 14.8L32.4453 10.744C32.3813 10.152 32.2933 9.576 32.1813 9.016C32.0693 8.456 32.0133 8.056 32.0133 7.816C32.0133 7.48 32.1093 7.232 32.3013 7.072C32.4933 6.896 32.8373 6.776 33.3333 6.712C33.4293 7.512 33.4933 8.112 33.5253 8.512C33.7013 10.064 33.8453 11.256 33.9573 12.088C34.0853 12.904 34.2453 13.76 34.4373 14.656C35.6693 14.112 36.8533 13.84 37.9893 13.84C39.0133 13.84 39.9253 14.056 40.7253 14.488C41.5253 14.904 42.1493 15.496 42.5973 16.264C43.0453 17.016 43.2693 17.864 43.2693 18.808C43.2693 19.912 42.7813 20.728 41.8053 21.256C40.8453 21.768 39.7413 22.024 38.4933 22.024ZM41.9253 18.856C41.9413 18.744 41.9493 18.584 41.9493 18.376C41.9493 17.24 41.5573 16.392 40.7733 15.832C40.0053 15.272 38.9093 14.992 37.4853 14.992C36.6053 14.992 35.9173 15.168 35.4213 15.52C34.9413 15.856 34.7013 16.32 34.7013 16.912C34.7013 18.272 35.0693 19.264 35.8053 19.888C36.5573 20.512 37.7013 20.824 39.2373 20.824C39.9733 20.824 40.5893 20.656 41.0853 20.32C41.5813 19.984 41.8613 19.496 41.9253 18.856ZM52.781 22C51.757 22 50.813 21.8 49.949 21.4C49.085 21 48.397 20.432 47.885 19.696C47.373 18.96 47.117 18.112 47.117 17.152C47.117 16.08 47.317 15.08 47.717 14.152C48.117 13.208 48.701 12.456 49.469 11.896C50.253 11.32 51.165 11.032 52.205 11.032C53.293 11.032 54.117 11.384 54.677 12.088C55.237 12.776 55.501 13.648 55.469 14.704C55.469 15.648 55.093 16.368 54.341 16.864C53.605 17.36 52.661 17.608 51.509 17.608C51.333 17.608 51.069 17.592 50.717 17.56C50.141 17.496 49.733 17.408 49.493 17.296C49.253 17.184 49.133 16.96 49.133 16.624C49.133 16.512 49.165 16.432 49.229 16.384C49.293 16.32 49.421 16.288 49.613 16.288C49.821 16.288 50.189 16.336 50.717 16.432C51.229 16.528 51.685 16.576 52.085 16.576C53.557 16.576 54.293 15.936 54.293 14.656C54.293 13.888 54.149 13.28 53.861 12.832C53.589 12.384 53.101 12.16 52.397 12.16C51.629 12.16 50.941 12.368 50.333 12.784C49.725 13.184 49.253 13.712 48.917 14.368C48.597 15.024 48.437 15.72 48.437 16.456C48.437 17.72 48.789 18.76 49.493 19.576C50.197 20.376 51.285 20.776 52.757 20.776C52.933 20.776 53.229 20.76 53.645 20.728C53.821 20.712 54.037 20.664 54.293 20.584C54.549 20.504 54.733 20.448 54.845 20.416C55.533 20.176 56.037 20.056 56.357 20.056C56.597 20.056 56.781 20.12 56.909 20.248C56.509 20.856 55.909 21.304 55.109 21.592C54.325 21.864 53.549 22 52.781 22ZM62.5548 22.096C62.3308 22.16 62.2028 22.192 62.1708 22.192C62.0428 22.192 61.9068 22.128 61.7628 22C61.2348 21.216 60.8508 19.848 60.6108 17.896C60.3868 15.944 60.2748 14.264 60.2748 12.856C60.2748 12.632 60.4348 12.52 60.7548 12.52C61.2348 12.52 61.4748 12.784 61.4748 13.312C61.4748 13.456 61.4668 13.576 61.4508 13.672C61.5948 13.336 61.8668 12.992 62.2668 12.64C62.6668 12.288 63.1308 11.992 63.6588 11.752C64.1868 11.512 64.7228 11.392 65.2668 11.392C66.9788 11.392 68.2268 12.152 69.0108 13.672C69.7948 15.176 70.1868 17.048 70.1868 19.288C70.1868 20.056 70.1068 20.672 69.9468 21.136C69.7868 21.584 69.5708 21.808 69.2988 21.808C69.0108 21.808 68.8668 21.72 68.8668 21.544C68.9788 20.696 69.0348 19.864 69.0348 19.048C69.0348 16.984 68.6748 15.424 67.9548 14.368C67.2348 13.296 66.2828 12.76 65.0988 12.76C64.5228 12.76 63.9628 12.904 63.4188 13.192C62.8908 13.48 62.4588 13.88 62.1228 14.392C61.8028 14.904 61.6428 15.488 61.6428 16.144C61.6428 16.88 61.6828 17.52 61.7628 18.064C61.8428 18.608 61.9708 19.264 62.1468 20.032C62.3388 20.784 62.4748 21.472 62.5548 22.096ZM80.1748 22C79.1508 22 78.2068 21.8 77.3428 21.4C76.4788 21 75.7908 20.432 75.2788 19.696C74.7668 18.96 74.5108 18.112 74.5108 17.152C74.5108 16.08 74.7108 15.08 75.1108 14.152C75.5108 13.208 76.0948 12.456 76.8628 11.896C77.6468 11.32 78.5588 11.032 79.5988 11.032C80.6868 11.032 81.5108 11.384 82.0708 12.088C82.6308 12.776 82.8948 13.648 82.8628 14.704C82.8628 15.648 82.4868 16.368 81.7348 16.864C80.9988 17.36 80.0548 17.608 78.9028 17.608C78.7268 17.608 78.4628 17.592 78.1108 17.56C77.5348 17.496 77.1268 17.408 76.8868 17.296C76.6468 17.184 76.5268 16.96 76.5268 16.624C76.5268 16.512 76.5588 16.432 76.6228 16.384C76.6868 16.32 76.8148 16.288 77.0068 16.288C77.2148 16.288 77.5828 16.336 78.1108 16.432C78.6228 16.528 79.0788 16.576 79.4788 16.576C80.9508 16.576 81.6868 15.936 81.6868 14.656C81.6868 13.888 81.5428 13.28 81.2548 12.832C80.9828 12.384 80.4948 12.16 79.7908 12.16C79.0228 12.16 78.3348 12.368 77.7268 12.784C77.1188 13.184 76.6468 13.712 76.3108 14.368C75.9908 15.024 75.8308 15.72 75.8308 16.456C75.8308 17.72 76.1828 18.76 76.8868 19.576C77.5908 20.376 78.6788 20.776 80.1508 20.776C80.3268 20.776 80.6228 20.76 81.0388 20.728C81.2148 20.712 81.4308 20.664 81.6868 20.584C81.9428 20.504 82.1268 20.448 82.2388 20.416C82.9268 20.176 83.4308 20.056 83.7508 20.056C83.9908 20.056 84.1748 20.12 84.3028 20.248C83.9028 20.856 83.3028 21.304 82.5028 21.592C81.7188 21.864 80.9428 22 80.1748 22ZM96.2846 19.312C96.6046 19.552 96.7646 19.808 96.7646 20.08C96.7646 20.512 96.3966 20.872 95.6606 21.16C94.9246 21.448 94.0926 21.664 93.1646 21.808C92.2366 21.936 91.5006 22 90.9566 22C90.3486 22 89.7646 21.904 89.2046 21.712C88.6606 21.504 88.3886 21.152 88.3886 20.656C88.3886 20.176 88.6526 19.552 89.1806 18.784C89.7246 18.016 90.3726 17.232 91.1246 16.432H88.0286C87.8686 16.432 87.7886 16.288 87.7886 16C87.7886 15.776 87.8126 15.624 87.8606 15.544C87.9086 15.448 87.9726 15.392 88.0526 15.376C88.1326 15.36 88.2846 15.352 88.5086 15.352H92.2046C92.7966 14.6 93.2446 13.96 93.5486 13.432C93.8686 12.888 94.0286 12.384 94.0286 11.92C94.0286 11.456 93.8686 11.04 93.5486 10.672C93.0526 10.576 92.5726 10.528 92.1086 10.528C91.2286 10.528 90.4846 10.68 89.8766 10.984C89.2686 11.272 88.9326 11.656 88.8686 12.136C88.5006 12.136 88.2526 12.072 88.1246 11.944C88.0126 11.816 87.9566 11.6 87.9566 11.296C87.9566 10.976 88.1166 10.672 88.4366 10.384C88.7726 10.08 89.2366 9.84 89.8286 9.664C90.4206 9.472 91.0846 9.376 91.8206 9.376C92.4286 9.376 93.0686 9.448 93.7406 9.592C94.1566 9.672 94.5086 9.936 94.7966 10.384C95.0846 10.832 95.2286 11.328 95.2286 11.872C95.2286 12.352 95.0766 12.856 94.7726 13.384C94.4846 13.912 94.0526 14.568 93.4766 15.352H94.6526C95.2606 15.352 95.6606 15.384 95.8526 15.448C96.0606 15.512 96.1646 15.64 96.1646 15.832C96.1646 15.992 96.1086 16.128 95.9966 16.24C95.9006 16.352 95.7966 16.408 95.6846 16.408H92.3726C91.5886 17.288 90.9886 18.072 90.5726 18.76C90.1566 19.432 89.9886 19.912 90.0686 20.2C90.1326 20.504 90.6286 20.712 91.5566 20.824C92.5966 20.824 93.4766 20.704 94.1966 20.464C94.9166 20.208 95.6126 19.824 96.2846 19.312ZM105.787 22C104.763 22 103.819 21.8 102.955 21.4C102.091 21 101.403 20.432 100.891 19.696C100.379 18.96 100.123 18.112 100.123 17.152C100.123 16.08 100.323 15.08 100.723 14.152C101.123 13.208 101.707 12.456 102.475 11.896C103.259 11.32 104.171 11.032 105.211 11.032C106.299 11.032 107.123 11.384 107.683 12.088C108.243 12.776 108.507 13.648 108.475 14.704C108.475 15.648 108.099 16.368 107.347 16.864C106.611 17.36 105.667 17.608 104.515 17.608C104.339 17.608 104.075 17.592 103.723 17.56C103.147 17.496 102.739 17.408 102.499 17.296C102.259 17.184 102.139 16.96 102.139 16.624C102.139 16.512 102.171 16.432 102.235 16.384C102.299 16.32 102.427 16.288 102.619 16.288C102.827 16.288 103.195 16.336 103.723 16.432C104.235 16.528 104.691 16.576 105.091 16.576C106.563 16.576 107.299 15.936 107.299 14.656C107.299 13.888 107.155 13.28 106.867 12.832C106.595 12.384 106.107 12.16 105.403 12.16C104.635 12.16 103.947 12.368 103.339 12.784C102.731 13.184 102.259 13.712 101.923 14.368C101.603 15.024 101.443 15.72 101.443 16.456C101.443 17.72 101.795 18.76 102.499 19.576C103.203 20.376 104.291 20.776 105.763 20.776C105.939 20.776 106.235 20.76 106.651 20.728C106.827 20.712 107.043 20.664 107.299 20.584C107.555 20.504 107.739 20.448 107.851 20.416C108.539 20.176 109.043 20.056 109.363 20.056C109.603 20.056 109.787 20.12 109.915 20.248C109.515 20.856 108.915 21.304 108.115 21.592C107.331 21.864 106.555 22 105.787 22ZM115.393 22C114.737 20.72 114.217 19.216 113.833 17.488C113.465 15.76 113.281 14.264 113.281 13C113.281 12.504 113.393 12.184 113.617 12.04C113.745 11.96 113.841 11.92 113.905 11.92C114.017 11.92 114.097 12.008 114.145 12.184C114.209 12.36 114.273 12.68 114.337 13.144L114.457 14.008C114.633 13.144 114.969 12.464 115.465 11.968C115.977 11.456 116.601 11.2 117.337 11.2C118.153 11.2 118.761 11.36 119.161 11.68C119.561 11.984 119.761 12.496 119.761 13.216C118.961 12.832 118.233 12.64 117.577 12.64C116.953 12.64 116.417 12.808 115.969 13.144C115.521 13.48 115.209 13.976 115.033 14.632C114.889 15.08 114.817 15.504 114.817 15.904C114.817 16.336 114.873 16.744 114.985 17.128C115.113 17.496 115.305 17.952 115.561 18.496C115.801 19.056 115.985 19.536 116.113 19.936C116.257 20.336 116.337 20.768 116.353 21.232C116.353 21.504 116.257 21.704 116.065 21.832C115.873 21.944 115.649 22 115.393 22Z\"\n          fill=\"white\"\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_f\"\n          x=\"0.819847\"\n          y=\"0\"\n          width=\"144.669\"\n          height=\"26.192\"\n          filterUnits=\"userSpaceOnUse\"\n          color-interpolation-filters=\"sRGB\"\n        >\n          <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend\n            mode=\"normal\"\n            in=\"SourceGraphic\"\n            in2=\"BackgroundImageFix\"\n            result=\"shape\"\n          />\n          <feGaussianBlur stdDeviation=\"2\" result=\"effect1_foregroundBlur\" />\n        </filter>\n      </defs>\n    </svg>\n  );\n};\n\nexport const Moon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M12 10.999c1.437.438 2.562 1.564 2.999 3.001.44-1.437 1.565-2.562 3.001-3-1.436-.439-2.561-1.563-3.001-3-.437 1.436-1.562 2.561-2.999 2.999zm8.001.001c.958.293 1.707 1.042 2 2.001.291-.959 1.042-1.709 1.999-2.001-.957-.292-1.707-1.042-2-2-.293.958-1.042 1.708-1.999 2zm-1-9c-.437 1.437-1.563 2.562-2.998 3.001 1.438.44 2.561 1.564 3.001 3.002.437-1.438 1.563-2.563 2.996-3.002-1.433-.437-2.559-1.564-2.999-3.001zm-7.001 22c-6.617 0-12-5.383-12-12s5.383-12 12-12c1.894 0 3.63.497 5.37 1.179-2.948.504-9.37 3.266-9.37 10.821 0 7.454 5.917 10.208 9.37 10.821-1.5.846-3.476 1.179-5.37 1.179z\" />\n    </svg>\n  );\n};\n\nexport const Sun = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M4.069 13h-4.069v-2h4.069c-.041.328-.069.661-.069 1s.028.672.069 1zm3.034-7.312l-2.881-2.881-1.414 1.414 2.881 2.881c.411-.529.885-1.003 1.414-1.414zm11.209 1.414l2.881-2.881-1.414-1.414-2.881 2.881c.528.411 1.002.886 1.414 1.414zm-6.312-3.102c.339 0 .672.028 1 .069v-4.069h-2v4.069c.328-.041.661-.069 1-.069zm0 16c-.339 0-.672-.028-1-.069v4.069h2v-4.069c-.328.041-.661.069-1 .069zm7.931-9c.041.328.069.661.069 1s-.028.672-.069 1h4.069v-2h-4.069zm-3.033 7.312l2.88 2.88 1.415-1.414-2.88-2.88c-.412.528-.886 1.002-1.415 1.414zm-11.21-1.415l-2.88 2.88 1.414 1.414 2.88-2.88c-.528-.411-1.003-.885-1.414-1.414zm2.312-4.897c0 2.206 1.794 4 4 4s4-1.794 4-4-1.794-4-4-4-4 1.794-4 4zm10 0c0 3.314-2.686 6-6 6s-6-2.686-6-6 2.686-6 6-6 6 2.686 6 6z\" />\n    </svg>\n  );\n};\n\nexport const ExitBlack = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z\" />\n    </svg>\n  );\n};\n\nexport const ExitWhite = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 16.094l-4.157-4.104 4.1-4.141-1.849-1.849-4.105 4.159-4.156-4.102-1.833 1.834 4.161 4.12-4.104 4.157 1.834 1.832 4.118-4.159 4.143 4.102 1.848-1.849z\" />\n    </svg>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Moon, Sun } from \"../Logos/Logo\";\nimport { useStateValue } from \"../../Context/StateProvider\";\nimport \"./InputSwitch.css\";\nfunction InputSwitch() {\n  const [show, setShow] = useState(true);\n  // eslint-disable-next-line no-unused-vars\n  const [state, dispatch] = useStateValue();\n  useEffect(() => {\n    if (show) {\n      dispatch({\n        type: \"DARK_MODE\",\n      });\n    } else {\n      dispatch({\n        type: \"LIGHT_MODE\",\n      });\n    }\n  }, [dispatch, show]);\n  return (\n    <div\n      className=\"inputS\"\n      onClick={() => setShow(!show)}\n      style={{\n        background: !show ? \"#171c28\" : \"white\",\n        border: !show ? \"2px  solid #171c28\" : \" 2px solid white\",\n      }}\n    >\n      <div\n        className=\"inputS__round\"\n        style={{ marginLeft: show && 60, background: show ? \"blue\" : \"white\" }}\n        onClick={() => setShow(!show)}\n      >\n        {show ? <Moon /> : <Sun />}\n      </div>\n    </div>\n  );\n}\n\nexport default InputSwitch;\n","import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport \"./Navbar.css\";\nimport { useStateValue } from \"../../Context/StateProvider\";\nimport InputSwitch from \"../Input/InputSwitch\";\nimport HamburgerMenu from \"react-hamburger-menu\";\nimport { Link } from \"react-router-dom\";\nfunction Navbar() {\n  const [state, dispatch] = useStateValue();\n  const options = [\"Home\", \"Create\", \"Transfer\", \"History\"];\n  const [showOptions, setOption] = useState(true);\n  const [size, setSize] = useState(0, 0);\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", updateSize);\n    updateSize();\n    return () => window.removeEventListener(\"resize\", updateSize);\n  }, [size]);\n\n  useEffect(() => {\n    let prevScrollPos = window.pageYOffset || 50;\n    const handleScroll = () => {\n      if (window.scrollY > 50) {\n        dispatch({\n          type: \"SHOW_UP_ARROW\",\n        });\n      } else {\n        dispatch({\n          type: \"HIDE_UP_ARROW\",\n        });\n      }\n      const currentScrollPos = window.pageYOffset;\n      const visible = prevScrollPos > currentScrollPos;\n      prevScrollPos = currentScrollPos;\n      if (state.navbar !== visible) {\n        dispatch({\n          type: \"NAVBAR\",\n          items: {\n            navbar: visible,\n          },\n        });\n      }\n    };\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [dispatch, state?.navbar]);\n  return (\n    <div\n      className=\"navbar\"\n      style={{\n        opacity: state.navbar ? 1 : 0,\n        transform: state?.navbar ? \"translateY(0px)\" : \"translateY(-100vh)\",\n        backgroundColor: state?.theme ? \"#000000\" : \"#0F1251\",\n        height: !showOptions && \"max-content\",\n      }}\n    >\n      <div className=\"navbar__inside\">\n        <div className=\"navbar__logo\"></div>\n        <div className=\"navbar__menu\">\n          <span onClick={() => setOption(!showOptions)} className=\"navicon\">\n            <HamburgerMenu\n              borderRadius={2}\n              isOpen={!showOptions}\n              width={30}\n              height={20}\n              menuClicked={() => setOption(!showOptions)}\n              strokeWidth={2}\n              color={state.theme ? \"#ffffff\" : \"#aaaaaa\"}\n            />\n          </span>\n        </div>\n      </div>\n      <div\n        className=\"navbar__options\"\n        style={{\n          transform: showOptions && size < 780 && \"translateX(-1000px)\",\n          opacity: showOptions && size < 780 ? 0 : 1,\n          borderRadius: showOptions && size < 780 && \"50%\",\n          color: showOptions && window.screen.width < 780 && \"#171c28\",\n        }}\n      >\n        {options.map((option, i) => (\n          <Link\n            key={i}\n            onClick={() => {\n              setOption(true);\n              if (option === \"History\" || option === \"Transfer\") {\n                dispatch({\n                  type: \"TABLE_CONFIG\",\n                  item: { table_config: option.toLowerCase() },\n                });\n              }\n            }}\n            to={`${option === \"Home\" ? \"/\" : \"/\" + option.toLowerCase()}`}\n            style={{ color: state.theme ? \"white\" : \"#E1E1E1\" }}\n          >\n            {option}\n          </Link>\n        ))}\n        <InputSwitch />\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import { Button, makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useStateValue } from \"../../Context/StateProvider\";\nimport \"./Landing.css\";\n\nconst useStyles = makeStyles({\n  btn: {\n    padding: \"10px 40px\",\n    marginRight: \"20px\",\n    border : \"2px solid blue\",\n    fontWeight : 800\n  },\n});\n\nfunction Landing() {\n  const classes = useStyles();\n  const [state] = useStateValue();\n  return (\n    <div\n      className=\"landing\"\n      style={{\n        backgroundColor: state?.theme ? \"#0A0A0A\" : \"white\",\n      }}\n    >\n      <div className=\"landing__content\">\n        <h1 style={{ color: state.theme ? \"white\" : \"#171c28\" }}>\n          WELCOME ALL !\n        </h1>\n        <p style={{ color: state.theme ? \"white\" : \"#171c28\" }}>\n          Create Account , Make Transcation !\n        </p>\n        <div className=\"landing__buttons\">\n          <Link to=\"/create\">\n            <Button\n              className={classes.btn}\n              variant={\"contained\"}\n              color={state.theme ? \"secondary\" : \"#0F1251\"}\n            >\n              Create\n            </Button>\n          </Link>\n          <Link to=\"/transfer\">\n            <Button\n              className={classes.btn}\n              variant={\"contained\"}\n              color={state.theme ? \"primary\" : \"#0F1251\"}\n            >\n              Transfer\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Landing;\n","import { Backdrop, Button, makeStyles } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useStateValue } from \"../../Context/StateProvider\";\nimport \"./Create.css\";\nimport Lottie from \"react-lottie-player\";\nimport CreateLottie from \"../../assests/lottie/create.json\";\n\nconst useStyles = makeStyles((theme) => ({\n  backbutton: {\n    zIndex: theme.zIndex.drawer + 1,\n    backgroundColor: \"#464646e7\",\n  },\n  btn: {\n    marginRight: \"20px\",\n  },\n  btn2 : {\n    marginTop : 20\n  }\n}));\n\nfunction Create() {\n  const classes = useStyles();\n  const [state] = useStateValue();\n  const [nameInput, setName] = useState(\"\");\n  const [emailInput, setEmail] = React.useState(\"\");\n  const [mobileInput, setMobile] = React.useState(\"\");\n  const [dateInput, setDate] = React.useState(\"\");\n  const [balanceInput, setBalance] = React.useState(0);\n  const [checkInput, setCheck] = React.useState(false);\n\n  const [show, setShow] = useState(false);\n  const [back, setBack] = useState(true);\n  const [err, setError] = useState();\n  const submit = (e) => {\n    setShow(!show);\n    e.preventDefault();\n    if (nameInput.length > 1) {\n      if (emailInput.length > 1) {\n        if (mobileInput.length === 10) {\n          if (dateInput !== null) {\n            if (checkInput === true) {\n              axios\n                .post(\"/users/create_user\", {\n                  name: nameInput,\n                  email: emailInput,\n                  mobile: mobileInput,\n                  date_of_birth: dateInput,\n                  balance: balanceInput,\n                })\n                .then((res) => {\n                  console.log(res);\n                  setError(res.data.code);\n                  setBack(res.data.status);\n                })\n                .catch((err) => {\n                  setBack(!back);\n                  setError(20);\n                });\n            }\n          }\n        }\n      }\n    }\n  };\n  return (\n    <div\n      className=\"create\"\n      style={{\n        backgroundColor: state?.theme ? \"#000000\" : \"white\",\n      }}\n    >\n    {/* Successfully created*/}\n      <Backdrop open={!back && show} className={classes.backbutton}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Lottie\n            loop={false}\n            animationData={CreateLottie}\n            style={{ width: \"300px\", height: \"300px\" }}\n            play={show}\n            speed={1}\n            onComplete={() => {\n              alert(\"Compleyed\");\n            }}\n          />\n          <Link to=\"/transfer\">\n            <Button\n              className={classes.btn}\n              variant={state.theme ? \"contained\" : \"contained\"}\n              color={state.theme ? \"primary\" : \"secondary\"}\n            >\n              Go to Transfer\n            </Button>\n          </Link>\n          <Link to=\"/create\">\n            <Button\n              className={classes.btn2}\n              variant={state.theme ? \"contained\" : \"contained\"}\n              color={state.theme ? \"primary\" : \"secondary\"}\n            >\n            CREATE USERS\n            </Button>\n          </Link>\n        </div>\n      </Backdrop>\n\n      <div\n        className=\"create__content\"\n        style={{\n          backgroundColor: state?.theme ? \"#0A0A0A\" : \"\",\n        }}\n      >\n        <form onSubmit={(e) => submit(e)}>\n          <div className=\"create__input\">\n            <p style={{ color: state.theme ? \"white\" : \"#171c28\" }}>Name</p>\n            <input\n              required\n              style={{\n                color: !state.theme ? \"white\" : \"#171c28\",\n                backgroundColor: state?.theme ? \"white\" : \"#dcdcdc\",\n              }}\n              type=\"text\"\n              placeholder={\"Your name\"}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </div>\n          <div className=\"create__input\">\n            <p\n              style={{\n                color: state.theme ? \"white\" : \"#171c28\",\n              }}\n            >\n              Date of birth\n            </p>\n            <input\n              required\n              style={{\n                color: !state.theme ? \"black\" : \"#171c28\",\n                backgroundColor: state?.theme ? \"white\" : \"#dcdcdc\",\n              }}\n              type=\"date\"\n              onChange={(e) => setDate(e.target.value)}\n            />\n          </div>\n          <div className=\"create__input\">\n            <p style={{ color: state.theme ? \"white\" : \"#171c28\" }}>\n              Email Address\n              <br />\n              {(err === 20 || err === 5) && (\n                <span style={{ fontSize: \"14px\", color: \"red\" }}>\n                  *E-mail Already exists\n                </span>\n              )}\n            </p>\n            <input\n              style={{\n                color: !state.theme ? \"white\" : \"#171c28\",\n                backgroundColor: state?.theme ? \"white\" : \"#dcdcdc\",\n              }}\n              required\n              type=\"email\"\n              placeholder={\"Your E-mail address\"}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div className=\"create__input\">\n            <p style={{ color: state.theme ? \"white\" : \"#171c28\" }}>\n              Mobile Number\n              <br />\n              {(err === 20 || err === 10) && (\n                <span style={{ fontSize: \"14px\", color: \"red\" }}>\n                  *Mobile Number Already exists\n                </span>\n              )}\n            </p>\n            <input\n              required\n              type=\"tel\"\n              maxLength=\"10\"\n              max=\"10\"\n              style={{\n                color: !state.theme ? \"white\" : \"#171c28\",\n                backgroundColor: state?.theme ? \"white\" : \"#dcdcdc\",\n              }}\n              placeholder={\"Your Mobile number\"}\n              onChange={(e) => setMobile(e.target.value)}\n            />\n          </div>\n          <div className=\"create__input\">\n            <p style={{ color: state.theme ? \"white\" : \"#171c28\" }}>Balance</p>\n            <input\n              style={{\n                color: state.theme ? \"black\" : \"#171c28\",\n                backgroundColor: state?.theme ? \"white\" : \"#dcdcdc\",\n              }}\n              required\n              type=\"number\"\n              placeholder={\"Your Balance\"}\n              value={balanceInput}\n              max={1000000000000000000000000}\n              min={0}\n              onChange={(e) => setBalance(e.target.value)}\n            />\n          </div>\n          <div className=\"create__input checkbox\">\n            <span\n              style={{\n                color: state.theme ? \"white\" : \"#171c28\",\n              }}\n            >\n              <input\n                required\n                className=\"check\"\n                type=\"checkbox\"\n                onClick={() => setCheck(!checkInput)}\n              />\n              &nbsp; Please ensure that you are ready to open your account\n            </span>\n          </div>\n          <div className=\"btn\">\n            <Button\n              type=\"submit\"\n              variant={state.theme ? \"contained\" : \"outlined\"}\n              color={state.theme ? \"primary\" : \"secondary\"}\n            >\n              Transfer\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Create;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Tables from \"./Components/Table/TransferTable\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Landing from \"./Pages/Landing/Landing\";\nimport Create from \"./Pages/Create/Create\";\nimport HistoryTable from \"./Components/Table/HistoryTable\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={() => <Landing />} />\n          <Route exact path=\"/create\" component={() => <Create />} />\n          <Route exact path=\"/transfer\" component={() => <Tables />} />\n          <Route exact path=\"/history\" component={() => <HistoryTable />} />\n          <Route path=\"*\" exact component={<h1>Error</h1>} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const initialState = {\n  theme: false,\n  navbar: true,\n  table_config: undefined,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"LIGHT_MODE\":\n      return {\n        ...state,\n        theme: false,\n      };\n    case \"DARK_MODE\":\n      return {\n        ...state,\n        theme: true,\n      };\n    case \"NAVBAR\":\n      return {\n        ...state,\n        navbar: action.items.navbar,\n      };\n    case \"TABLE_CONFIG\":\n      return {\n        ...state,\n        table_config: action.item.table_config,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { StateProvider } from \"./Context/StateProvider\";\nimport reducer, { initialState } from \"./Context/reducer\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}